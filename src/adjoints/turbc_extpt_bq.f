C        Generated by TAPENADE     (INRIA, Tropics team)
C  Tapenade 3.6 (r4343) - 10 Feb 2012 10:52
C
C  Differentiation of turbc_extpt in reverse (adjoint) mode:
C   gradient     of useful results: q
C   with respect to varying inputs: q
C
C*************************************************************
      SUBROUTINE TURBC_EXTPT_BQ(q, qb, jd, kd, js, je, ks, ke, idir)
      USE PARAMS_GLOBAL
      IMPLICIT NONE
C*************************************************************
C*************************************************************
      INTEGER jd, kd
      REAL q(jd, kd, nq)
      REAL qb(jd, kd, nq)
      INTEGER js, je, ks, ke, idir
C
C.. local variables
C
      INTEGER j, k, j1, k1, j2, k2, jc, kc, iadd, iadir
      REAL foso
      REAL tmp
      REAL tmp0
      INTEGER branch
      REAL tmpb
      INTRINSIC SIGN
      REAL tmp0b
      INTRINSIC ABS
C
      foso = 1.0
      iadd = SIGN(1, idir)
      IF (idir .GE. 0.) THEN
        iadir = idir
      ELSE
        iadir = -idir
      END IF
C
      IF (iadir .EQ. 1) THEN
        DO jc=1,je-js+1
          IF (idir .EQ. 1) THEN
            CALL PUSHINTEGER4(j)
            j = je - jc + 1
            CALL PUSHCONTROL2B(0)
          ELSE IF (idir .EQ. -1) THEN
            CALL PUSHINTEGER4(j)
            j = js + jc - 1
            CALL PUSHCONTROL2B(1)
          ELSE
            CALL PUSHCONTROL2B(2)
          END IF
          CALL PUSHINTEGER4(j1)
          j1 = j + iadd
          CALL PUSHINTEGER4(j2)
          j2 = j1 + iadd
        ENDDO
        DO jc=je-js+1,1,-1
          DO k=ke,ks,-1
            tmp0b = qb(j, k, nmv+1)
            qb(j, k, nmv+1) = 0.0
            qb(j1, k, nmv+1) = qb(j1, k, nmv+1) + (foso+1.)*tmp0b
            qb(j2, k, nmv+1) = qb(j2, k, nmv+1) - foso*tmp0b
          ENDDO
          CALL POPINTEGER4(j2)
          CALL POPINTEGER4(j1)
          CALL POPCONTROL2B(branch)
          IF (branch .EQ. 0) THEN
            CALL POPINTEGER4(j)
          ELSE IF (branch .EQ. 1) THEN
            CALL POPINTEGER4(j)
          END IF
        ENDDO
      ELSE IF (iadir .EQ. 2) THEN
        DO kc=1,ke-ks+1
          IF (idir .EQ. 2) THEN
            CALL PUSHINTEGER4(k)
            k = ke - kc + 1
            CALL PUSHCONTROL2B(0)
          ELSE IF (idir .EQ. -2) THEN
            CALL PUSHINTEGER4(k)
            k = ks + kc - 1
            CALL PUSHCONTROL2B(1)
          ELSE
            CALL PUSHCONTROL2B(2)
          END IF
          CALL PUSHINTEGER4(k1)
          k1 = k + iadd
          CALL PUSHINTEGER4(k2)
          k2 = k1 + iadd
        ENDDO
        DO kc=ke-ks+1,1,-1
          DO j=je,js,-1
            tmpb = qb(j, k, nmv+1)
            qb(j, k, nmv+1) = 0.0
            qb(j, k1, nmv+1) = qb(j, k1, nmv+1) + (foso+1.)*tmpb
            qb(j, k2, nmv+1) = qb(j, k2, nmv+1) - foso*tmpb
          ENDDO
          CALL POPINTEGER4(k2)
          CALL POPINTEGER4(k1)
          CALL POPCONTROL2B(branch)
          IF (branch .EQ. 0) THEN
            CALL POPINTEGER4(k)
          ELSE IF (branch .EQ. 1) THEN
            CALL POPINTEGER4(k)
          END IF
        ENDDO
      END IF
      END
