C        Generated by TAPENADE     (INRIA, Tropics team)
C  Tapenade 3.6 (r4343) - 10 Feb 2012 10:52
C
C  Differentiation of bcwake in reverse (adjoint) mode:
C   gradient     of useful results: q
C   with respect to varying inputs: q
C
C***********************************************************************
      SUBROUTINE BCWAKE_BQ(q, qb, x, y, jd, kd, js, je, ks, ke, idir)
      USE PARAMS_GLOBAL
      IMPLICIT NONE
C
C  for complete cgrid   
C  treatment for in the trailing wake at k = 1
C
C***********************************************************************
C***********************************************************************
C
      INTEGER jd, kd, js, je, ks, ke, idir
      REAL q(jd, kd, nq)
      REAL qb(jd, kd, nq)
C local variables
      REAL x(jd, kd), y(jd, kd)
C
      INTEGER k, k1, j, jj, kc, iadd, iadir
      REAL scale1, scale2
      REAL scale1b, scale2b
      REAL tmp
      REAL tmp0
      REAL tmp1
      REAL tmp2
      REAL tmp3
      REAL tmp4
      REAL tmp5
      REAL tmp6
      INTEGER branch
      REAL tmp4b
      REAL tempb0
      REAL tmpb
      INTRINSIC SIGN
      REAL tmp0b
      INTRINSIC ABS
      REAL tmp3b
      REAL tmp6b
      REAL tempb
      REAL tmp2b
      REAL tmp5b
      REAL tmp1b
C**   first executable statement
      IF (idir .GE. 0.) THEN
        iadir = idir
      ELSE
        iadir = -idir
      END IF
C
      IF (iadir .NE. 1) THEN
        IF (iadir .EQ. 2) THEN
C
          DO kc=1,ke-ks+1
            IF (idir .EQ. 2) THEN
              CALL PUSHINTEGER4(k)
              k = ke - kc + 1
              CALL PUSHINTEGER4(k1)
              k1 = ke + kc
              CALL PUSHCONTROL2B(2)
            ELSE IF (idir .EQ. -2) THEN
              CALL PUSHINTEGER4(k)
              k = ks + kc - 1
              CALL PUSHINTEGER4(k1)
              k1 = ks - kc
              CALL PUSHCONTROL2B(1)
            ELSE
              CALL PUSHCONTROL2B(0)
            END IF
C
C..in the wake, average points above and below
C
            DO j=js,je
              jj = jd - j + 1
              CALL PUSHREAL8(scale1)
              scale1 = q(jj, k1, nq)/q(j, k, nq)
              CALL PUSHREAL8(scale2)
              scale2 = q(j, k1, nq)/q(jj, k, nq)
              tmp = q(jj, k1, 1)*scale1
              CALL PUSHREAL8(q(j, k, 1))
              q(j, k, 1) = tmp
              tmp0 = q(jj, k1, 2)*scale1
              CALL PUSHREAL8(q(j, k, 2))
              q(j, k, 2) = tmp0
              tmp1 = q(jj, k1, 3)*scale1
              CALL PUSHREAL8(q(j, k, 3))
              q(j, k, 3) = tmp1
              tmp2 = q(jj, k1, 4)*scale1
              CALL PUSHREAL8(q(j, k, 4))
              q(j, k, 4) = tmp2
              tmp3 = q(j, k1, 1)*scale2
              CALL PUSHREAL8(q(jj, k, 1))
              q(jj, k, 1) = tmp3
              tmp4 = q(j, k1, 2)*scale2
              CALL PUSHREAL8(q(jj, k, 2))
              q(jj, k, 2) = tmp4
              tmp5 = q(j, k1, 3)*scale2
              CALL PUSHREAL8(q(jj, k, 3))
              q(jj, k, 3) = tmp5
              tmp6 = q(j, k1, 4)*scale2
              CALL PUSHREAL8(q(jj, k, 4))
              q(jj, k, 4) = tmp6
            ENDDO
          ENDDO
          DO kc=ke-ks+1,1,-1
            DO j=je,js,-1
              jj = jd - j + 1
              CALL POPREAL8(q(jj, k, 4))
              tmp6b = qb(jj, k, 4)
              qb(jj, k, 4) = 0.0
              qb(j, k1, 4) = qb(j, k1, 4) + scale2*tmp6b
              scale2b = q(j, k1, 4)*tmp6b
              CALL POPREAL8(q(jj, k, 3))
              tmp5b = qb(jj, k, 3)
              qb(jj, k, 3) = 0.0
              qb(j, k1, 3) = qb(j, k1, 3) + scale2*tmp5b
              scale2b = scale2b + q(j, k1, 3)*tmp5b
              CALL POPREAL8(q(jj, k, 2))
              tmp4b = qb(jj, k, 2)
              qb(jj, k, 2) = 0.0
              qb(j, k1, 2) = qb(j, k1, 2) + scale2*tmp4b
              scale2b = scale2b + q(j, k1, 2)*tmp4b
              CALL POPREAL8(q(jj, k, 1))
              tmp3b = qb(jj, k, 1)
              qb(jj, k, 1) = 0.0
              qb(j, k1, 1) = qb(j, k1, 1) + scale2*tmp3b
              scale2b = scale2b + q(j, k1, 1)*tmp3b
              CALL POPREAL8(q(j, k, 4))
              tmp2b = qb(j, k, 4)
              qb(j, k, 4) = 0.0
              qb(jj, k1, 4) = qb(jj, k1, 4) + scale1*tmp2b
              scale1b = q(jj, k1, 4)*tmp2b
              CALL POPREAL8(q(j, k, 3))
              tmp1b = qb(j, k, 3)
              qb(j, k, 3) = 0.0
              qb(jj, k1, 3) = qb(jj, k1, 3) + scale1*tmp1b
              scale1b = scale1b + q(jj, k1, 3)*tmp1b
              CALL POPREAL8(q(j, k, 2))
              tmp0b = qb(j, k, 2)
              qb(j, k, 2) = 0.0
              qb(jj, k1, 2) = qb(jj, k1, 2) + scale1*tmp0b
              scale1b = scale1b + q(jj, k1, 2)*tmp0b
              CALL POPREAL8(q(j, k, 1))
              tmpb = qb(j, k, 1)
              qb(j, k, 1) = 0.0
              qb(jj, k1, 1) = qb(jj, k1, 1) + scale1*tmpb
              scale1b = scale1b + q(jj, k1, 1)*tmpb
              CALL POPREAL8(scale2)
              tempb = scale2b/q(jj, k, nq)
              qb(j, k1, nq) = qb(j, k1, nq) + tempb
              qb(jj, k, nq) = qb(jj, k, nq) - q(j, k1, nq)*tempb/q(jj, k
     +          , nq)
              CALL POPREAL8(scale1)
              tempb0 = scale1b/q(j, k, nq)
              qb(jj, k1, nq) = qb(jj, k1, nq) + tempb0
              qb(j, k, nq) = qb(j, k, nq) - q(jj, k1, nq)*tempb0/q(j, k
     +          , nq)
            ENDDO
            CALL POPCONTROL2B(branch)
            IF (branch .NE. 0) THEN
              IF (branch .EQ. 1) THEN
                CALL POPINTEGER4(k1)
                CALL POPINTEGER4(k)
              ELSE
                CALL POPINTEGER4(k1)
                CALL POPINTEGER4(k)
              END IF
            END IF
          ENDDO
        END IF
      END IF
      END
