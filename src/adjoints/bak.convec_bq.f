C        Generated by TAPENADE     (INRIA, Tropics team)
C  Tapenade 3.6 (r4343) - 10 Feb 2012 10:52
C
C  Differentiation of convec in reverse (adjoint) mode:
C   gradient     of useful results: q u v sjmat
C   with respect to varying inputs: q u v sjmat
C
C***********************************************************************
      SUBROUTINE CONVEC_BQ(q, qb, sn, u, ub, v, vb, sjmat, sjmatb, vmul
     +                     , xx, xy, yx, yy, ug, vg, aj, bj, cj, ak, bk
     +                     , ck, jd, kd, js, je, ks, ke)
      USE PARAMS_GLOBAL
      IMPLICIT NONE
      INCLUDE 'DIFFSIZES.inc'
C  Hint: ISIZE1OFumbINconvec should be the value of jd
C  Hint: ISIZE2OFumbINconvec should be the value of kd
C  Hint: ISIZE1OFupbINconvec should be the value of jd
C  Hint: ISIZE2OFupbINconvec should be the value of kd
C  Hint: ISIZE1OFvmbINconvec should be the value of jd
C  Hint: ISIZE2OFvmbINconvec should be the value of kd
C  Hint: ISIZE1OFvpbINconvec should be the value of jd
C  Hint: ISIZE2OFvpbINconvec should be the value of kd
C***********************************************************************
C***********************************************************************
C
      INTEGER jd, kd, js, je, ks, ke
      REAL q(jd, kd, nq), sjmat(jd, kd)
      REAL qb(jd, kd, nq), sjmatb(jd, kd)
      REAL ug(jd, kd), vg(jd, kd)
      REAL xx(jd, kd), xy(jd, kd), yx(jd, kd), yy(jd, kd)
      REAL aj(jd, kd), bj(jd, kd), cj(jd, kd)
      REAL ak(jd, kd), bk(jd, kd), ck(jd, kd)
C
      REAL vmul(jd, kd), sn(jd, kd)
Clocal variables
      REAL u(jd, kd), v(jd, kd)
      REAL ub(jd, kd), vb(jd, kd)
C
      REAL um(jd, kd), up(jd, kd), vm(jd, kd), vp(jd, kd)
C
      INTEGER j, k
      REAL uu, vv, fwd, bck
      REAL uub, vvb
      INTEGER branch
      REAL abs1b
      REAL tempb2
      REAL tempb1
      REAL tempb0
      REAL vmb(jd, kd)
      INTRINSIC ABS
      REAL vpb(jd, kd)
      REAL abs0b
      REAL abs3b
      REAL tempb
      REAL abs3
      REAL abs2
      REAL abs1
      REAL abs0
      REAL abs2b
      REAL umb(jd, kd)
      REAL upb(jd, kd)
C
C***  first executable statement
C
      DO k=ks-1,ke+1
        DO j=js-1,je+1
          uu = xx(j, k)*(u(j, k)-ug(j, k)) + xy(j, k)*(v(j, k)-vg(j, k))
          vv = yx(j, k)*(u(j, k)-ug(j, k)) + yy(j, k)*(v(j, k)-vg(j, k))
          IF (uu .GE. 0.) THEN
            abs0 = uu
            CALL PUSHCONTROL1B(0)
          ELSE
            abs0 = -uu
            CALL PUSHCONTROL1B(1)
          END IF
          up(j, k) = 0.5*(uu+abs0)
          IF (uu .GE. 0.) THEN
            abs1 = uu
            CALL PUSHCONTROL1B(0)
          ELSE
            abs1 = -uu
            CALL PUSHCONTROL1B(1)
          END IF
          um(j, k) = 0.5*(uu-abs1)
          IF (vv .GE. 0.) THEN
            abs2 = vv
            CALL PUSHCONTROL1B(0)
          ELSE
            abs2 = -vv
            CALL PUSHCONTROL1B(1)
          END IF
          vp(j, k) = 0.5*(vv+abs2)
          IF (vv .GE. 0.) THEN
            abs3 = vv
            CALL PUSHCONTROL1B(0)
          ELSE
            abs3 = -vv
            CALL PUSHCONTROL1B(1)
          END IF
          vm(j, k) = 0.5*(vv-abs3)
        ENDDO
      ENDDO
      umb = 0.0
      upb = 0.0
      vmb = 0.0
      vpb = 0.0
      DO k=ke,ks,-1
        DO j=je,js,-1
          tempb = -(vp(j, k)*sjmatb(j, k))
          tempb0 = -(vm(j, k)*sjmatb(j, k))
          vpb(j, k) = vpb(j, k) - (q(j, k, nmv+1)-q(j, k-1, nmv+1))*
     +      sjmatb(j, k)
          qb(j, k, nmv+1) = qb(j, k, nmv+1) + tempb - tempb0
          qb(j, k-1, nmv+1) = qb(j, k-1, nmv+1) - tempb
          vmb(j, k) = vmb(j, k) - (q(j, k+1, nmv+1)-q(j, k, nmv+1))*
     +      sjmatb(j, k)
          qb(j, k+1, nmv+1) = qb(j, k+1, nmv+1) + tempb0
          tempb1 = -(up(j, k)*sjmatb(j, k))
          tempb2 = -(um(j, k)*sjmatb(j, k))
          upb(j, k) = upb(j, k) - (q(j, k, nmv+1)-q(j-1, k, nmv+1))*
     +      sjmatb(j, k)
          qb(j, k, nmv+1) = qb(j, k, nmv+1) + tempb1 - tempb2
          qb(j-1, k, nmv+1) = qb(j-1, k, nmv+1) - tempb1
          umb(j, k) = umb(j, k) - (q(j+1, k, nmv+1)-q(j, k, nmv+1))*
     +      sjmatb(j, k)
          qb(j+1, k, nmv+1) = qb(j+1, k, nmv+1) + tempb2
        ENDDO
      ENDDO
      DO k=ke+1,ks-1,-1
        DO j=je+1,js-1,-1
          vvb = 0.5*vmb(j, k)
          abs3b = -(0.5*vmb(j, k))
          vmb(j, k) = 0.0
          CALL POPCONTROL1B(branch)
          IF (branch .EQ. 0) THEN
            vvb = vvb + abs3b
          ELSE
            vvb = vvb - abs3b
          END IF
          vvb = vvb + 0.5*vpb(j, k)
          abs2b = 0.5*vpb(j, k)
          vpb(j, k) = 0.0
          CALL POPCONTROL1B(branch)
          IF (branch .EQ. 0) THEN
            vvb = vvb + abs2b
          ELSE
            vvb = vvb - abs2b
          END IF
          uub = 0.5*umb(j, k)
          abs1b = -(0.5*umb(j, k))
          umb(j, k) = 0.0
          CALL POPCONTROL1B(branch)
          IF (branch .EQ. 0) THEN
            uub = uub + abs1b
          ELSE
            uub = uub - abs1b
          END IF
          uub = uub + 0.5*upb(j, k)
          abs0b = 0.5*upb(j, k)
          upb(j, k) = 0.0
          CALL POPCONTROL1B(branch)
          IF (branch .EQ. 0) THEN
            uub = uub + abs0b
          ELSE
            uub = uub - abs0b
          END IF
          ub(j, k) = ub(j, k) + xx(j, k)*uub + yx(j, k)*vvb
          vb(j, k) = vb(j, k) + xy(j, k)*uub + yy(j, k)*vvb
        ENDDO
      ENDDO
      END
