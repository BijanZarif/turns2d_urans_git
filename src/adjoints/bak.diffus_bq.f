C        Generated by TAPENADE     (INRIA, Tropics team)
C  Tapenade 3.6 (r4343) - 10 Feb 2012 10:52
C
C  Differentiation of diffus in reverse (adjoint) mode:
C   gradient     of useful results: rey q vmul sjmat
C   with respect to varying inputs: rey q vmul sjmat
C
C***********************************************************************
      SUBROUTINE DIFFUS_BQ(q, qb, sn, u, v, sjmat, sjmatb, vmul, vmulb, 
     +                     xx, xy, yx, yy, aj, bj, cj, ak, bk, ck, jd, 
     +                     kd, js, je, ks, ke)
      USE PARAMS_GLOBAL
      USE PARAMS_SENSITIVITY
      IMPLICIT NONE
      INCLUDE 'DIFFSIZES.inc'
C  Hint: ISIZE1OFchpbINdiffus should be the value of jd
C  Hint: ISIZE2OFchpbINdiffus should be the value of kd
C  Hint: ISIZE1OFdnuhpbINdiffus should be the value of jd
C  Hint: ISIZE2OFdnuhpbINdiffus should be the value of kd
C***********************************************************************
      INTEGER jd, kd, js, je, ks, ke
      REAL q(jd, kd, nq), sjmat(jd, kd)
      REAL qb(jd, kd, nq), sjmatb(jd, kd)
      REAL xx(jd, kd), xy(jd, kd), yx(jd, kd), yy(jd, kd)
      REAL aj(jd, kd), bj(jd, kd), cj(jd, kd)
      REAL ak(jd, kd), bk(jd, kd), ck(jd, kd)
      REAL vmul(jd, kd), sn(jd, kd)
      REAL vmulb(jd, kd)
      REAL u(jd, kd), v(jd, kd)
C
      REAL chp(jd, kd), dnuhp(jd, kd)
      REAL dmxh(jd, kd), dmyh(jd, kd)
      INTEGER j, k
      REAL vnulh, vnuh, dxp, dxm, c2, dcp, dcm, ax, cx, dyp, dym, ay, cy
      REAL vnulhb, vnuhb, c2b, dcpb, dcmb, axb, cxb, ayb, cyb
      INTEGER branch
      REAL temp3
      REAL temp2
      REAL temp1
      REAL temp0
      REAL tempb0
      REAL temp0b
      INTRINSIC MAX
      REAL dnuhpb(jd, kd)
      REAL temp3b
      REAL temp6b
      REAL temp5b0
      REAL tempb
      REAL temp2b
      REAL temp5b
      REAL temp3b0
      REAL chpb(jd, kd)
      REAL temp1b
      REAL temp
      REAL temp1b0
      REAL temp4b
      REAL temp6
      REAL temp5
      REAL temp4
      INCLUDE 'sadata.h'
C
C***  first executable statement
C...compute j direction differences.
C
C.....compute half-point co-efficients
C
      DO k=ks-1,ke+1
        DO j=js-1,je
C
          dmxh(j, k) = 0.5*(xx(j, k)+xx(j+1, k))
          dmyh(j, k) = 0.5*(xy(j, k)+xy(j+1, k))
          CALL PUSHREAL8(vnulh)
          vnulh = 0.5*(vmul(j, k)/q(j, k, 1)/q(j, k, nq)+vmul(j+1, k)/q(
     +      j+1, k, 1)/q(j+1, k, nq))
          vnuh = 0.5*(q(j, k, nmv+1)+q(j+1, k, nmv+1))
          chp(j, k) = (1.+cb2)/sigma/rey*(vnulh+vnuh)
          dnuhp(j, k) = q(j+1, k, nmv+1) - q(j, k, nmv+1)
        ENDDO
      ENDDO
C
C
C.....compute j direction fluxes
C
      DO j=js,je
        DO k=ks-1,ke+1
          CALL PUSHREAL8(dxp)
          dxp = dmxh(j, k)*xx(j, k) + dmyh(j, k)*xy(j, k)
          CALL PUSHREAL8(dxm)
          dxm = dmxh(j-1, k)*xx(j, k) + dmyh(j-1, k)*xy(j, k)
          c2 = cb2/sigma/rey
          CALL PUSHREAL8(c2)
          c2 = c2*(vmul(j, k)/q(j, k, 1)/q(j, k, nq)+q(j, k, nmv+1))
C
C.....enforce positivity (as suggested by overflow)
C
          dcp = dxp*(chp(j, k)-c2)
          dcm = dxm*(chp(j-1, k)-c2)
          CALL PUSHREAL8(ax)
          ax = 0.0
          CALL PUSHREAL8(cx)
          cx = 0.0
          IF (k .NE. ke + 1 .AND. k .NE. ks - 1) THEN
            IF (dcm .LT. 0.0) THEN
              ax = 0.0
              CALL PUSHCONTROL1B(0)
            ELSE
              ax = dcm
              CALL PUSHCONTROL1B(1)
            END IF
            IF (dcp .LT. 0.0) THEN
              cx = 0.0
              CALL PUSHCONTROL2B(2)
            ELSE
              cx = dcp
              CALL PUSHCONTROL2B(1)
            END IF
          ELSE
            CALL PUSHCONTROL2B(0)
          END IF
        ENDDO
      ENDDO
C
C...compute k direction differences.
C
C.....compute half-point co-efficients
C
      DO k=ks-1,ke
        DO j=js-1,je+1
C
          dmxh(j, k) = 0.5*(yx(j, k)+yx(j, k+1))
          dmyh(j, k) = 0.5*(yy(j, k)+yy(j, k+1))
          CALL PUSHREAL8(vnulh)
          vnulh = 0.5*(vmul(j, k)/q(j, k, 1)/q(j, k, nq)+vmul(j, k+1)/q(
     +      j, k+1, 1)/q(j, k+1, nq))
          vnuh = 0.5*(q(j, k, nmv+1)+q(j, k+1, nmv+1))
          chp(j, k) = (1.+cb2)/sigma/rey*(vnulh+vnuh)
          CALL PUSHREAL8(dnuhp(j, k))
          dnuhp(j, k) = q(j, k+1, nmv+1) - q(j, k, nmv+1)
        ENDDO
      ENDDO
C
C
C.....compute k direction fluxes
C
      DO k=ks,ke
        DO j=js-1,je+1
C
          dyp = dmxh(j, k)*yx(j, k) + dmyh(j, k)*yy(j, k)
          dym = dmxh(j, k-1)*yx(j, k) + dmyh(j, k-1)*yy(j, k)
          c2 = cb2/sigma/rey
          CALL PUSHREAL8(c2)
          c2 = c2*(vmul(j, k)/q(j, k, 1)/q(j, k, nq)+q(j, k, nmv+1))
C
C.....enforce positivity (as suggested by overflow)
          dcp = dyp*(chp(j, k)-c2)
          dcm = dym*(chp(j, k-1)-c2)
          CALL PUSHREAL8(ay)
          ay = 0.0
          CALL PUSHREAL8(cy)
          cy = 0.0
          IF (j .NE. js - 1 .AND. j .NE. je + 1) THEN
            IF (dcm .LT. 0.0) THEN
              ay = 0.0
              CALL PUSHCONTROL1B(0)
            ELSE
              ay = dcm
              CALL PUSHCONTROL1B(1)
            END IF
            IF (dcp .LT. 0.0) THEN
              cy = 0.0
              CALL PUSHCONTROL2B(2)
            ELSE
              cy = dcp
              CALL PUSHCONTROL2B(1)
            END IF
          ELSE
            CALL PUSHCONTROL2B(0)
          END IF
        ENDDO
      ENDDO
      chpb = 0.0
      dnuhpb = 0.0
      DO k=ke,ks,-1
        DO j=je+1,js-1,-1
          ayb = -(dnuhp(j, k-1)*sjmatb(j, k))
          dnuhpb(j, k-1) = dnuhpb(j, k-1) - ay*sjmatb(j, k)
          cyb = dnuhp(j, k)*sjmatb(j, k)
          dnuhpb(j, k) = dnuhpb(j, k) + cy*sjmatb(j, k)
          CALL POPCONTROL2B(branch)
          IF (branch .EQ. 0) THEN
            dcmb = 0.0
            dcpb = 0.0
          ELSE
            IF (branch .EQ. 1) THEN
              dcpb = cyb
            ELSE
              dcpb = 0.0
            END IF
            CALL POPCONTROL1B(branch)
            IF (branch .EQ. 0) THEN
              dcmb = 0.0
            ELSE
              dcmb = ayb
            END IF
          END IF
          dyp = dmxh(j, k)*yx(j, k) + dmyh(j, k)*yy(j, k)
          CALL POPREAL8(cy)
          CALL POPREAL8(ay)
          dym = dmxh(j, k-1)*yx(j, k) + dmyh(j, k-1)*yy(j, k)
          chpb(j, k-1) = chpb(j, k-1) + dym*dcmb
          c2b = -(dyp*dcpb) - dym*dcmb
          chpb(j, k) = chpb(j, k) + dyp*dcpb
          CALL POPREAL8(c2)
          temp6 = q(j, k, 1)*q(j, k, nq)
          temp5 = vmul(j, k)/temp6
          temp5b0 = c2*c2b/temp6
          temp6b = -(temp5*temp5b0)
          vmulb(j, k) = vmulb(j, k) + temp5b0
          qb(j, k, 1) = qb(j, k, 1) + q(j, k, nq)*temp6b
          qb(j, k, nq) = qb(j, k, nq) + q(j, k, 1)*temp6b
          qb(j, k, nmv+1) = qb(j, k, nmv+1) + c2*c2b
          c2b = (temp5+q(j, k, nmv+1))*c2b
          reyb = reyb - cb2*c2b/(sigma*rey**2)
        ENDDO
      ENDDO
      DO k=ke,ks-1,-1
        DO j=je+1,js-1,-1
          temp5b = (cb2+1.)*chpb(j, k)/(sigma*rey)
          vnuhb = temp5b
          CALL POPREAL8(dnuhp(j, k))
          qb(j, k+1, nmv+1) = qb(j, k+1, nmv+1) + dnuhpb(j, k)
          qb(j, k, nmv+1) = qb(j, k, nmv+1) + 0.5*vnuhb - dnuhpb(j, k)
          dnuhpb(j, k) = 0.0
          vnuh = 0.5*(q(j, k, nmv+1)+q(j, k+1, nmv+1))
          vnulhb = temp5b
          reyb = reyb - (vnulh+vnuh)*temp5b/rey
          chpb(j, k) = 0.0
          qb(j, k+1, nmv+1) = qb(j, k+1, nmv+1) + 0.5*vnuhb
          CALL POPREAL8(vnulh)
          temp4 = q(j, k+1, 1)*q(j, k+1, nq)
          temp3 = q(j, k, 1)*q(j, k, nq)
          temp3b = 0.5*vnulhb
          temp3b0 = -(vmul(j, k)*temp3b/temp3**2)
          temp4b = -(vmul(j, k+1)*temp3b/temp4**2)
          vmulb(j, k) = vmulb(j, k) + temp3b/temp3
          qb(j, k, 1) = qb(j, k, 1) + q(j, k, nq)*temp3b0
          qb(j, k, nq) = qb(j, k, nq) + q(j, k, 1)*temp3b0
          vmulb(j, k+1) = vmulb(j, k+1) + temp3b/temp4
          qb(j, k+1, 1) = qb(j, k+1, 1) + q(j, k+1, nq)*temp4b
          qb(j, k+1, nq) = qb(j, k+1, nq) + q(j, k+1, 1)*temp4b
        ENDDO
      ENDDO
      DO j=je,js,-1
        DO k=ke+1,ks-1,-1
          axb = -(dnuhp(j-1, k)*sjmatb(j, k))
          dnuhpb(j-1, k) = dnuhpb(j-1, k) - ax*sjmatb(j, k)
          cxb = dnuhp(j, k)*sjmatb(j, k)
          dnuhpb(j, k) = dnuhpb(j, k) + cx*sjmatb(j, k)
          CALL POPCONTROL2B(branch)
          IF (branch .EQ. 0) THEN
            dcmb = 0.0
            dcpb = 0.0
          ELSE
            IF (branch .EQ. 1) THEN
              dcpb = cxb
            ELSE
              dcpb = 0.0
            END IF
            CALL POPCONTROL1B(branch)
            IF (branch .EQ. 0) THEN
              dcmb = 0.0
            ELSE
              dcmb = axb
            END IF
          END IF
          CALL POPREAL8(cx)
          CALL POPREAL8(ax)
          chpb(j-1, k) = chpb(j-1, k) + dxm*dcmb
          c2b = -(dxp*dcpb) - dxm*dcmb
          chpb(j, k) = chpb(j, k) + dxp*dcpb
          CALL POPREAL8(c2)
          temp2 = q(j, k, 1)*q(j, k, nq)
          temp1 = vmul(j, k)/temp2
          temp1b0 = c2*c2b/temp2
          temp2b = -(temp1*temp1b0)
          vmulb(j, k) = vmulb(j, k) + temp1b0
          qb(j, k, 1) = qb(j, k, 1) + q(j, k, nq)*temp2b
          qb(j, k, nq) = qb(j, k, nq) + q(j, k, 1)*temp2b
          qb(j, k, nmv+1) = qb(j, k, nmv+1) + c2*c2b
          c2b = (temp1+q(j, k, nmv+1))*c2b
          reyb = reyb - cb2*c2b/(sigma*rey**2)
          CALL POPREAL8(dxm)
          CALL POPREAL8(dxp)
        ENDDO
      ENDDO
      DO k=ke+1,ks-1,-1
        DO j=je,js-1,-1
          temp1b = (cb2+1.)*chpb(j, k)/(sigma*rey)
          vnuhb = temp1b
          qb(j+1, k, nmv+1) = qb(j+1, k, nmv+1) + dnuhpb(j, k)
          qb(j, k, nmv+1) = qb(j, k, nmv+1) + 0.5*vnuhb - dnuhpb(j, k)
          dnuhpb(j, k) = 0.0
          vnuh = 0.5*(q(j, k, nmv+1)+q(j+1, k, nmv+1))
          vnulhb = temp1b
          reyb = reyb - (vnulh+vnuh)*temp1b/rey
          chpb(j, k) = 0.0
          qb(j+1, k, nmv+1) = qb(j+1, k, nmv+1) + 0.5*vnuhb
          CALL POPREAL8(vnulh)
          temp0 = q(j+1, k, 1)*q(j+1, k, nq)
          temp = q(j, k, 1)*q(j, k, nq)
          tempb = 0.5*vnulhb
          tempb0 = -(vmul(j, k)*tempb/temp**2)
          temp0b = -(vmul(j+1, k)*tempb/temp0**2)
          vmulb(j, k) = vmulb(j, k) + tempb/temp
          qb(j, k, 1) = qb(j, k, 1) + q(j, k, nq)*tempb0
          qb(j, k, nq) = qb(j, k, nq) + q(j, k, 1)*tempb0
          vmulb(j+1, k) = vmulb(j+1, k) + tempb/temp0
          qb(j+1, k, 1) = qb(j+1, k, 1) + q(j+1, k, nq)*temp0b
          qb(j+1, k, nq) = qb(j+1, k, nq) + q(j+1, k, 1)*temp0b
        ENDDO
      ENDDO
      END
