C        Generated by TAPENADE     (INRIA, Tropics team)
C  Tapenade 3.6 (r4343) - 10 Feb 2012 10:52
C
C  Differentiation of bctany in reverse (adjoint) mode:
C   gradient     of useful results: q uwall vwall
C   with respect to varying inputs: q
C
C***********************************************************************
      SUBROUTINE BCTANY_BQ(q, qb, uwall, uwallb, vwall, vwallb, xx, xy, 
     +                     yx, yy, ug, vg, jd, kd, js, je, ks, ke, idir,
     +                     invsc)
      USE PARAMS_GLOBAL
      IMPLICIT NONE
      INCLUDE 'DIFFSIZES.inc'
C  Hint: ISIZE1OFubINbctany should be the value of mdim
C  Hint: ISIZE1OFvbINbctany should be the value of mdim
C
C  inviscid : tangency b.c. at a eta equal constant surface
C  viscous  : no slip condition
C
C  presently, set up for surface at k = kreq
C             direction of freestream = idir   
C
C***********************************************************************
C***********************************************************************
      INTEGER jd, kd, ks, ke, idir
      REAL q(jd, kd, nq)
      REAL qb(jd, kd, nq)
      REAL uwall(mdim), vwall(mdim)
      REAL uwallb(mdim), vwallb(mdim)
      REAL xx(jd, kd), xy(jd, kd), yx(jd, kd), yy(jd, kd)
      logical invsc
C local variables
      REAL ug(jd, kd), vg(jd, kd)
C
      REAL u(mdim), v(mdim)
      REAL scale(mdim)
C
      INTEGER js, je, k, k1, k2, j, iadd, iadir
      REAL foso, t, u1, u2, v1
      REAL u1b, u2b, v1b
      INTEGER branch
      REAL tempb3
      REAL tempb2
      REAL tempb1
      REAL tempb0
      INTRINSIC SIGN
      INTRINSIC ABS
      REAL vb(mdim)
      REAL tempb
      REAL ub(mdim)
C***  first executable statement
C
      iadd = SIGN(1, idir)
      IF (idir .GE. 0.) THEN
        iadir = idir
      ELSE
        iadir = -idir
      END IF
C
      IF (iadir .NE. 1) THEN
        IF (iadir .EQ. 2) THEN
          IF (idir .EQ. 2) THEN
            k = ke
          ELSE IF (idir .EQ. -2) THEN
            k = ks
          END IF
          k1 = k + iadd
          k2 = k1 + iadd
          foso = 1.0
C
          !am IF (invisc) THEN
          IF (invsc) THEN
            CALL PUSHCONTROL1B(0)
          ELSE
            CALL PUSHCONTROL1B(1)
          END IF
          CALL UV_BQ(js, je, k, xx, xy, yx, yy, u, ub, v, vb, uwall, 
     +               uwallb, vwall, vwallb, jd, kd)
          CALL POPCONTROL1B(branch)
          IF (branch .EQ. 0) THEN
            DO j=js,je
              v1b = -vb(j)
              vb(j) = 0.0
              tempb = v1b/q(j, k1, 1)
              qb(j, k1, 2) = qb(j, k1, 2) + yx(j, k)*tempb
              qb(j, k1, 3) = qb(j, k1, 3) + yy(j, k)*tempb
              qb(j, k1, 1) = qb(j, k1, 1) - (yx(j, k)*q(j, k1, 2)+yy(j, 
     +          k)*q(j, k1, 3))*tempb/q(j, k1, 1)
              u1b = (foso+1.)*ub(j)
              u2b = -(foso*ub(j))
              ub(j) = 0.0
              tempb0 = u2b/q(j, k2, 1)
              qb(j, k2, 2) = qb(j, k2, 2) + xx(j, k)*tempb0
              qb(j, k2, 3) = qb(j, k2, 3) + xy(j, k)*tempb0
              qb(j, k2, 1) = qb(j, k2, 1) - (xx(j, k)*q(j, k2, 2)+xy(j, 
     +          k)*q(j, k2, 3))*tempb0/q(j, k2, 1)
              tempb1 = u1b/q(j, k1, 1)
              qb(j, k1, 2) = qb(j, k1, 2) + xx(j, k)*tempb1
              qb(j, k1, 3) = qb(j, k1, 3) + xy(j, k)*tempb1
              qb(j, k1, 1) = qb(j, k1, 1) - (xx(j, k)*q(j, k1, 2)+xy(j, 
     +          k)*q(j, k1, 3))*tempb1/q(j, k1, 1)
            ENDDO
          ELSE
            DO j=js,je
              v1b = -vb(j)
              vb(j) = 0.0
              u1b = -ub(j)
              ub(j) = 0.0
              tempb2 = v1b/q(j, k1, 1)
              qb(j, k1, 2) = qb(j, k1, 2) + yx(j, k)*tempb2
              qb(j, k1, 3) = qb(j, k1, 3) + yy(j, k)*tempb2
              qb(j, k1, 1) = qb(j, k1, 1) - (yx(j, k)*q(j, k1, 2)+yy(j, 
     +          k)*q(j, k1, 3))*tempb2/q(j, k1, 1)
              tempb3 = u1b/q(j, k1, 1)
              qb(j, k1, 2) = qb(j, k1, 2) + xx(j, k)*tempb3
              qb(j, k1, 3) = qb(j, k1, 3) + xy(j, k)*tempb3
              qb(j, k1, 1) = qb(j, k1, 1) - (xx(j, k)*q(j, k1, 2)+xy(j, 
     +          k)*q(j, k1, 3))*tempb3/q(j, k1, 1)
            ENDDO
          END IF
        END IF
      END IF
      END
