C        Generated by TAPENADE     (INRIA, Tropics team)
C  Tapenade 3.6 (r4343) - 10 Feb 2012 10:52
C
C  Differentiation of bcout_inf in reverse (adjoint) mode:
C   gradient     of useful results: vinf uinf q
C   with respect to varying inputs: vinf uinf q
C
C*********************************************************************
      SUBROUTINE BCOUT_INF_BQ(q, qb, x, y, xx, xy, yx, yy, ug, vg, jd, 
     +                        kd, js, je, ks, ke, idir)
      USE PARAMS_GLOBAL
      USE PARAMS_SENSITIVITY
      IMPLICIT NONE
C
C     Outflow boundary condition 
C*********************************************************************
C*********************************************************************
      INTEGER jd, kd, js, je, ks, ke, idir
      REAL q(jd, kd, nq)
      REAL qb(jd, kd, nq)
C local variables
      REAL xx(jd, kd), xy(jd, kd), yx(jd, kd), yy(jd, kd), ug(jd, kd), 
     +     vg(jd, kd), x(jd, kd), y(jd, kd)
C
      REAL rj, rk
      REAL rjb, rkb
      INTEGER j, k, iadd, iadir
      REAL tempb0
      INTRINSIC SIGN
      INTRINSIC ABS
      REAL tempb
C***  first executable statement
C
      IF (idir .GE. 0.) THEN
        iadir = idir
      ELSE
        iadir = -idir
      END IF
C
      IF (iadir .EQ. 1) THEN
        DO j=js,je
          DO k=ks,ke
            CALL PUSHREAL8(rj)
            rj = 1./q(j, k, nq)
            CALL PUSHREAL8(q(j, k, 1))
            q(j, k, 1) = rinf*rj
            CALL PUSHREAL8(q(j, k, 2))
            q(j, k, 2) = rinf*uinf*rj
            CALL PUSHREAL8(q(j, k, 3))
            q(j, k, 3) = rinf*vinf*rj
          ENDDO
        ENDDO
        DO j=je,js,-1
          DO k=ke,ks,-1
            tempb0 = 0.5*qb(j, k, 4)/q(j, k, 1)
            rjb = pinf*qb(j, k, 4)/gm1
            qb(j, k, 2) = qb(j, k, 2) + 2*q(j, k, 2)*tempb0
            qb(j, k, 3) = qb(j, k, 3) + 2*q(j, k, 3)*tempb0
            qb(j, k, 1) = qb(j, k, 1) - (q(j, k, 2)**2+q(j, k, 3)**2)*
     +        tempb0/q(j, k, 1)
            qb(j, k, 4) = 0.0
            CALL POPREAL8(q(j, k, 3))
            vinfb = vinfb + rinf*rj*qb(j, k, 3)
            rjb = rjb + rinf*vinf*qb(j, k, 3)
            qb(j, k, 3) = 0.0
            CALL POPREAL8(q(j, k, 2))
            uinfb = uinfb + rinf*rj*qb(j, k, 2)
            rjb = rjb + rinf*uinf*qb(j, k, 2)
            qb(j, k, 2) = 0.0
            CALL POPREAL8(q(j, k, 1))
            rjb = rjb + rinf*qb(j, k, 1)
            qb(j, k, 1) = 0.0
            CALL POPREAL8(rj)
            qb(j, k, nq) = qb(j, k, nq) - rjb/q(j, k, nq)**2
          ENDDO
        ENDDO
      ELSE IF (iadir .EQ. 2) THEN
        DO k=ks,ke
          DO j=js,je
            CALL PUSHREAL8(rk)
            rk = 1./q(j, k, nq)
            CALL PUSHREAL8(q(j, k, 1))
            q(j, k, 1) = rinf*rk
            CALL PUSHREAL8(q(j, k, 2))
            q(j, k, 2) = rinf*uinf*rk
            CALL PUSHREAL8(q(j, k, 3))
            q(j, k, 3) = rinf*vinf*rk
          ENDDO
        ENDDO
        DO k=ke,ks,-1
          DO j=je,js,-1
            tempb = 0.5*qb(j, k, 4)/q(j, k, 1)
            rkb = pinf*qb(j, k, 4)/gm1
            qb(j, k, 2) = qb(j, k, 2) + 2*q(j, k, 2)*tempb
            qb(j, k, 3) = qb(j, k, 3) + 2*q(j, k, 3)*tempb
            qb(j, k, 1) = qb(j, k, 1) - (q(j, k, 2)**2+q(j, k, 3)**2)*
     +        tempb/q(j, k, 1)
            qb(j, k, 4) = 0.0
            CALL POPREAL8(q(j, k, 3))
            vinfb = vinfb + rinf*rk*qb(j, k, 3)
            rkb = rkb + rinf*vinf*qb(j, k, 3)
            qb(j, k, 3) = 0.0
            CALL POPREAL8(q(j, k, 2))
            uinfb = uinfb + rinf*rk*qb(j, k, 2)
            rkb = rkb + rinf*uinf*qb(j, k, 2)
            qb(j, k, 2) = 0.0
            CALL POPREAL8(q(j, k, 1))
            rkb = rkb + rinf*qb(j, k, 1)
            qb(j, k, 1) = 0.0
            CALL POPREAL8(rk)
            qb(j, k, nq) = qb(j, k, nq) - rkb/q(j, k, nq)**2
          ENDDO
        ENDDO
      END IF
      END
