C        Generated by TAPENADE     (INRIA, Tropics team)
C  Tapenade 3.6 (r4343) - 10 Feb 2012 10:52
C
C  Differentiation of roetrklflx in reverse (adjoint) mode:
C   gradient     of useful results: f ql qr
C   with respect to varying inputs: f ql qr
C
C
C***********************************************************************
      SUBROUTINE ROETRKLFLX_BQ(f, fb, ql, qlb, qr, qrb, xa, ya, tj, is, 
     +                         ie, b)
      USE PARAMS_GLOBAL
      IMPLICIT NONE
C
C  compute the generalized numerical flux in roe!'s upwinding
C  by s.o. and uses turkel preconditioning                         
C  mod by jdb to incorporate smoother entropy check
C
C***********************************************************************
C***********************************************************************
C
      INTEGER is, ie
      REAL f(mdim, nmv)
      REAL fb(mdim, nmv)
      REAL tj(mdim), xa(mdim), ya(mdim), b(mdim)
C local variables
      REAL ql(mdim, nmv), qr(mdim, nmv)
      REAL qlb(mdim, nmv), qrb(mdim, nmv)
C
      REAL eps, rlft, ulft, vlft, plft
      REAL rlftb, ulftb, vlftb, plftb
      REAL rlfti, rulft, rvlft, uvl, elft, hlft, clft
      REAL rlftib, rulftb, rvlftb, uvlb, elftb, hlftb, clftb
      REAL rrht, urht, vrht, prht
      REAL rrhtb, urhtb, vrhtb, prhtb
      REAL rrhti, rurht, rvrht, uvr, erht, hrht, crht
      REAL rrhtib, rurhtb, rvrhtb, uvrb, erhtb, hrhtb, crhtb
      REAL tklft, tomegalft, tkrht, tomegarht
      REAL rat, rati, rav, uav, vav, hav, uv, cav, tkav, tomegaav
      REAL ratb, ratib, ravb, uavb, vavb, havb, uvb, cavb
      REAL aq1, aq2, aq3, aq4, aq5, aq6, ri1, ri2, ri3, rr2, rr, r0, r1
     +     , r2, r3
      REAL aq1b, aq2b, aq3b, aq4b
      REAL uumxt, uu, c2, c2i, auu, aupc, aumc, uulft, uurht, upclft, 
     +     upcrht
      REAL uumxtb, uub, c2b, c2ib, auub, aupcb, aumcb, uulftb, uurhtb, 
     +     upclftb, upcrhtb
      REAL umclft, umcrht, dauu, dauus, daupc, daumc, daumcs, rcav, aquu
      REAL umclftb, umcrhtb, dauub, daupcb, daumcb, aquub
      REAL daupcs, c2ih, ruuav, b1, b2, b3, b4, b5, b6, b7, b8, b9, aj
      REAL ruuavb, b1b, b2b, b3b, b4b, b5b, b6b, b7b
      REAL plar, eplft, eprht, fssub
      REAL plarb, eplftb, eprhtb
      REAL r, s, x, bsq
      REAL rb, sb, xb
C
      INTEGER i, i1
      INTEGER branch
      REAL abs1b
      REAL tempb9
      REAL tempb8
      REAL tempb7
      REAL tempb6
      REAL tempb5
      REAL tempb4
      REAL tempb3
      REAL tempb18
      REAL tempb2
      REAL tempb17
      REAL tempb1
      REAL tempb16
      REAL tempb0
      REAL tempb15
      REAL tempb14
      REAL tempb13
      REAL tempb12
      REAL tempb11
      REAL tempb10
      INTRINSIC ABS
      REAL abs0b
      REAL tempb
      INTRINSIC AMAX1
      REAL abs1
      REAL abs0
      INTRINSIC SQRT
C
C***  first executable statement
C
      eps = 1.e-6
      DO i=is,ie
C
        i1 = i + 1
        rlft = ql(i, 1)
        ulft = ql(i, 2)
        vlft = ql(i, 3)
        plft = ql(i, 4)
        rlfti = 1.0/rlft
        rulft = rlft*ulft
        rvlft = rlft*vlft
        uvl = 0.5*(ulft*ulft+vlft*vlft)
        elft = plft/gm1 + rlft*uvl
        hlft = (elft+plft)*rlfti
        clft = SQRT(gm1*(hlft-uvl))
C
        rrht = qr(i1, 1)
        urht = qr(i1, 2)
        vrht = qr(i1, 3)
        prht = qr(i1, 4)
        rrhti = 1.0/rrht
        rurht = rrht*urht
        rvrht = rrht*vrht
        uvr = 0.5*(urht*urht+vrht*vrht)
        erht = prht/gm1 + rrht*uvr
        hrht = (erht+prht)*rrhti
        crht = SQRT(gm1*(hrht-uvr))
C
        rat = SQRT(rrht*rlfti)
        rati = 1.0/(rat+1.)
        rav = rat*rlft
        uav = (rat*urht+ulft)*rati
        vav = (rat*vrht+vlft)*rati
        hav = (rat*hrht+hlft)*rati
        uv = 0.5*(uav*uav+vav*vav)
        cav = SQRT(gm1*(hav-uv))
C
        aq1 = rrht - rlft
        aq2 = urht - ulft
        aq3 = vrht - vlft
        aq4 = prht - plft
C
        ri1 = xa(i)
        ri2 = ya(i)
        ri3 = tj(i)
        rr2 = ri1*ri1 + ri2*ri2
        rr = SQRT(rr2)
        r0 = 1.0/rr
        r1 = ri1*r0
        r2 = ri2*r0
        r3 = ri3*r0
C
        uumxt = r1*uav + r2*vav
        uu = uumxt + r3
        c2 = cav*cav
        c2i = 1.0/c2
C
        bsq = mp**2/(b(i)-mp**2*(b(i)-1))
C
        x = SQRT((1.-bsq)*uu*(1.-bsq)*uu + 4.*bsq*c2)
        IF (uu .GE. 0.) THEN
          auu = uu
          CALL PUSHCONTROL1B(0)
        ELSE
          auu = -uu
          CALL PUSHCONTROL1B(1)
        END IF
        IF ((1.+bsq)*uu + x .GE. 0.) THEN
          abs0 = (1.+bsq)*uu + x
          CALL PUSHCONTROL1B(0)
        ELSE
          abs0 = -((1.+bsq)*uu+x)
          CALL PUSHCONTROL1B(1)
        END IF
        aupc = 0.5*abs0
        IF ((1.+bsq)*uu - x .GE. 0.) THEN
          abs1 = (1.+bsq)*uu - x
          CALL PUSHCONTROL1B(0)
        ELSE
          abs1 = -((1.+bsq)*uu-x)
          CALL PUSHCONTROL1B(1)
        END IF
        aumc = 0.5*abs1
C     
        uulft = r1*ulft + r2*vlft + r3
        uurht = r1*urht + r2*vrht + r3
        x = SQRT((1.-bsq)*uulft*((1.-bsq)*uulft) + 4.*bsq*clft*clft)
        upclft = 0.5*((1.+bsq)*uulft+x)
        umclft = 0.5*((1.+bsq)*uulft-x)
        x = SQRT((1.-bsq)*uurht*((1.-bsq)*uurht) + 4.*bsq*crht*crht)
        upcrht = 0.5*((1.+bsq)*uurht+x)
        umcrht = 0.5*((1.+bsq)*uurht-x)
C
        dauu = 4.*(uurht-uulft) + eps
        IF (dauu .LT. 0.0) THEN
          dauus = 0.0
        ELSE
          dauus = dauu
        END IF
Ccray       auu = cvmgt(auu**2/dauu+0.25*dauu,auu,auu.le.0.5*dauus)
        IF (auu .LE. 0.5*dauus) THEN
          CALL PUSHREAL8(auu)
          auu = auu**2/dauu + 0.25*dauu
          CALL PUSHCONTROL1B(1)
        ELSE
          CALL PUSHCONTROL1B(0)
        END IF
C
        daupc = 4.*(upcrht-upclft) + eps
        IF (daupc .LT. 0.0) THEN
          daupcs = 0.0
        ELSE
          daupcs = daupc
        END IF
Ccray       aupc = cvmgt(aupc**2/daupc+0.25*daupc,aupc,aupc.le.0.5*daupcs)
        IF (aupc .LE. 0.5*daupcs) THEN
          CALL PUSHREAL8(aupc)
          aupc = aupc**2/daupc + 0.25*daupc
          CALL PUSHCONTROL1B(1)
        ELSE
          CALL PUSHCONTROL1B(0)
        END IF
C
        daumc = 4.*(umcrht-umclft) + eps
        IF (daumc .LT. 0.0) THEN
          daumcs = 0.0
        ELSE
          daumcs = daumc
        END IF
Ccray       aumc = cvmgt(aumc**2/daumc+0.25*daumc,aumc,aumc.le.0.5*daumcs)
        IF (aumc .LE. 0.5*daumcs) THEN
          CALL PUSHREAL8(aumc)
          aumc = aumc**2/daumc + 0.25*daumc
          CALL PUSHCONTROL1B(0)
        ELSE
          CALL PUSHCONTROL1B(1)
        END IF
C     
        aquu = uurht - uulft
        ruuav = auu*rav
        x = SQRT((1.-bsq)*uu*((1.-bsq)*uu) + 4.*bsq*c2)
        r = 0.5*((1.-bsq)*uu+x)
        s = 0.5*((1.-bsq)*uu-x)
        b1 = auu*(aq1-c2i*aq4)
        b2 = aupc*(aq4/r+rav*aquu)/x
        b3 = aumc*(-(aq4/s)-rav*aquu)/x
        b4 = b1 + b2 + b3
        b5 = r*b2 + s*b3
        b6 = ruuav*(aq2-r1*aquu)
        b7 = ruuav*(aq3-r2*aquu)
C
C
        aj = 0.5*rr
        eplft = elft + plft
        eprht = erht + prht
        tempb9 = aj*fb(i, 4)
        eplftb = uulft*tempb9
        eprhtb = uurht*tempb9
        aq4b = -tempb9
        fb(i, 4) = 0.0
        tempb10 = aj*fb(i, 3)
        rvlftb = uulft*tempb10
        rvrhtb = uurht*tempb10
        aq3b = -tempb10
        fb(i, 3) = 0.0
        tempb12 = aj*fb(i, 2)
        plarb = r2*tempb10 + r1*tempb12 - r3*tempb9
        rulftb = uulft*tempb12
        rurhtb = uurht*tempb12
        aq2b = -tempb12
        fb(i, 2) = 0.0
        tempb11 = aj*fb(i, 1)
        rlftb = uulft*tempb11
        rrhtb = uurht*tempb11
        aq1b = -tempb11
        fb(i, 1) = 0.0
        erhtb = eprhtb
        prhtb = plarb + eprhtb
        elftb = eplftb
        plftb = plarb + eplftb
        havb = b4*aq4b
        b4b = vav*aq3b + aq1b + uav*aq2b + hav*aq4b
        uumxtb = b5*aq4b
        b5b = r2*aq3b + r1*aq2b + uumxt*aq4b
        uavb = b4*aq2b + b6*aq4b
        b6b = aq2b + uav*aq4b
        vavb = b4*aq3b + b7*aq4b
        b7b = aq3b + vav*aq4b
        b1b = b4b - c2*aq4b/gm1
        ruuavb = (aq2-r1*aquu)*b6b + (aq3-r2*aquu)*b7b
        aq3b = ruuav*b7b
        aq2b = ruuav*b6b
        b2b = b4b + r*b5b
        b3b = b4b + s*b5b
        tempb15 = aumc*b3b/x
        sb = aq4*tempb15/s**2 + b3*b5b
        tempb16 = (-(aq4/s)-rav*aquu)*b3b/x
        aumcb = tempb16
        tempb14 = aupc*b2b/x
        aquub = rav*tempb14 - ruuav*r1*b6b - rav*tempb15 - ruuav*r2*b7b
        uulftb = rvlft*tempb10 + rlft*tempb11 - aquub + rulft*tempb12 + 
     +    eplft*tempb9
        uurhtb = rvrht*tempb10 + rrht*tempb11 + aquub + rurht*tempb12 + 
     +    eprht*tempb9
        rb = b2*b5b - aq4*tempb14/r**2
        ravb = aquu*tempb14 + auu*ruuavb - aquu*tempb15
        tempb18 = (aq4/r+rav*aquu)*b2b/x
        xb = 0.5*rb - aupc*tempb18/x - 0.5*sb - aumc*tempb16/x
        aupcb = tempb18
        tempb17 = auu*b1b
        auub = rav*ruuavb + (aq1-c2i*aq4)*b1b
        aq1b = tempb17
        c2ib = -(aq4*tempb17)
        IF ((1.-bsq)**2*uu**2 + bsq*4.*c2 .EQ. 0.0) THEN
          tempb13 = 0.0
        ELSE
          tempb13 = xb/(2.0*SQRT((1.-bsq)**2*uu**2+bsq*4.*c2))
        END IF
        c2b = bsq*4.*tempb13 - b1*aq4b/gm1
        aq4b = tempb14/r - c2i*tempb17 - tempb15/s
        uub = 0.5*(1.-bsq)*rb + (1.-bsq)**2*2*uu*tempb13 + 0.5*(1.-bsq)*
     +    sb
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) THEN
          CALL POPREAL8(aumc)
          daumcb = (0.25-aumc**2/daumc**2)*aumcb
          aumcb = 2*aumc*aumcb/daumc
        ELSE
          daumcb = 0.0
        END IF
        umcrhtb = 4.*daumcb
        umclftb = -(4.*daumcb)
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) THEN
          daupcb = 0.0
        ELSE
          CALL POPREAL8(aupc)
          daupcb = (0.25-aupc**2/daupc**2)*aupcb
          aupcb = 2*aupc*aupcb/daupc
        END IF
        upcrhtb = 4.*daupcb
        upclftb = -(4.*daupcb)
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) THEN
          dauub = 0.0
        ELSE
          CALL POPREAL8(auu)
          dauub = (0.25-auu**2/dauu**2)*auub
          auub = 2*auu*auub/dauu
        END IF
        xb = 0.5*upcrhtb - 0.5*umcrhtb
        IF ((1.-bsq)**2*uurht**2 + bsq*4.*crht**2 .EQ. 0.0) THEN
          tempb7 = 0.0
        ELSE
          tempb7 = xb/(2.0*SQRT((1.-bsq)**2*uurht**2+bsq*4.*crht**2))
        END IF
        xb = 0.5*upclftb - 0.5*umclftb
        IF ((1.-bsq)**2*uulft**2 + bsq*4.*clft**2 .EQ. 0.0) THEN
          tempb8 = 0.0
        ELSE
          tempb8 = xb/(2.0*SQRT((1.-bsq)**2*uulft**2+bsq*4.*clft**2))
        END IF
        uurhtb = uurhtb + 0.5*(bsq+1.)*umcrhtb + (1.-bsq)**2*2*uurht*
     +    tempb7 + 0.5*(bsq+1.)*upcrhtb + 4.*dauub
        uulftb = uulftb + 0.5*(bsq+1.)*umclftb + (1.-bsq)**2*2*uulft*
     +    tempb8 + 0.5*(bsq+1.)*upclftb - 4.*dauub
        crhtb = bsq*4.*2*crht*tempb7
        clftb = bsq*4.*2*clft*tempb8
        urhtb = r1*uurhtb
        vrhtb = r2*uurhtb
        ulftb = r1*uulftb
        vlftb = r2*uulftb
        abs1b = 0.5*aumcb
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) THEN
          uub = uub + (bsq+1.)*abs1b
          xb = -abs1b
        ELSE
          xb = abs1b
          uub = uub - (bsq+1.)*abs1b
        END IF
        abs0b = 0.5*aupcb
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) THEN
          uub = uub + (bsq+1.)*abs0b
          xb = xb + abs0b
        ELSE
          uub = uub - (bsq+1.)*abs0b
          xb = xb - abs0b
        END IF
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) THEN
          uub = uub + auub
        ELSE
          uub = uub - auub
        END IF
        IF (gm1*(hlft-uvl) .EQ. 0.0) THEN
          tempb6 = 0.0
        ELSE
          tempb6 = gm1*clftb/(2.0*SQRT(gm1*(hlft-uvl)))
        END IF
        IF (gm1*(hrht-uvr) .EQ. 0.0) THEN
          tempb5 = 0.0
        ELSE
          tempb5 = gm1*crhtb/(2.0*SQRT(gm1*(hrht-uvr)))
        END IF
        IF ((1.-bsq)**2*uu**2 + bsq*4.*c2 .EQ. 0.0) THEN
          tempb = 0.0
        ELSE
          tempb = xb/(2.0*SQRT((1.-bsq)**2*uu**2+bsq*4.*c2))
        END IF
        uub = uub + (1.-bsq)**2*2*uu*tempb
        c2b = c2b + bsq*4.*tempb - c2ib/c2**2
        cavb = 2*cav*c2b
        uumxtb = uumxtb + uub
        IF (gm1*(hav-uv) .EQ. 0.0) THEN
          tempb3 = 0.0
        ELSE
          tempb3 = gm1*cavb/(2.0*SQRT(gm1*(hav-uv)))
        END IF
        havb = havb + tempb3
        uvb = -tempb3
        uavb = uavb + 0.5*2*uav*uvb + r1*uumxtb
        vavb = vavb + 0.5*2*vav*uvb + r2*uumxtb
        tempb4 = rati*havb
        hrhtb = tempb5 + rat*tempb4
        hlftb = tempb6 + tempb4
        ratib = (rat*vrht+vlft)*vavb + (rat*urht+ulft)*uavb + (rat*hrht+
     +    hlft)*havb
        tempb0 = rati*vavb
        tempb1 = rati*uavb
        ratb = vrht*tempb0 + rlft*ravb - ratib/(rat+1.)**2 + urht*tempb1
     +    + hrht*tempb4
        IF (rrht*rlfti .EQ. 0.0) THEN
          tempb2 = 0.0
        ELSE
          tempb2 = ratb/(2.0*SQRT(rrht*rlfti))
        END IF
        rlftib = (elft+plft)*hlftb + rrht*tempb2
        erhtb = erhtb + rrhti*hrhtb
        prhtb = prhtb + rrhti*hrhtb + erhtb/gm1 + aq4b
        uvrb = rrht*erhtb - tempb5
        vrhtb = vrhtb + rat*tempb0 + rrht*rvrhtb + 0.5*2*vrht*uvrb + 
     +    aq3b
        urhtb = urhtb + rat*tempb1 + rrht*rurhtb + 0.5*2*urht*uvrb + 
     +    aq2b
        rrhtib = (erht+prht)*hrhtb
        rrhtb = rrhtb + rlfti*tempb2 + vrht*rvrhtb - rrhtib/rrht**2 + 
     +    urht*rurhtb + uvr*erhtb + aq1b
        qrb(i1, 4) = qrb(i1, 4) + prhtb
        qrb(i1, 3) = qrb(i1, 3) + vrhtb
        qrb(i1, 2) = qrb(i1, 2) + urhtb
        qrb(i1, 1) = qrb(i1, 1) + rrhtb
        elftb = elftb + rlfti*hlftb
        plftb = plftb + rlfti*hlftb + elftb/gm1 - aq4b
        rlftb = rlftb + rat*ravb + vlft*rvlftb - rlftib/rlft**2 + ulft*
     +    rulftb + uvl*elftb - aq1b
        uvlb = rlft*elftb - tempb6
        vlftb = vlftb + tempb0 + rlft*rvlftb + 0.5*2*vlft*uvlb - aq3b
        ulftb = ulftb + tempb1 + rlft*rulftb + 0.5*2*ulft*uvlb - aq2b
        qlb(i, 4) = qlb(i, 4) + plftb
        qlb(i, 3) = qlb(i, 3) + vlftb
        qlb(i, 2) = qlb(i, 2) + ulftb
        qlb(i, 1) = qlb(i, 1) + rlftb
      ENDDO
      END
