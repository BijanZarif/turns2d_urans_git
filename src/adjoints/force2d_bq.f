C        Generated by TAPENADE     (INRIA, Tropics team)
C  Tapenade 3.6 (r4343) - 10 Feb 2012 10:52
C
C  Differentiation of force2d in reverse (adjoint) mode:
C   gradient     of useful results: fmtip rey fsmach cpower q cfx
C                cfy cm0
C   with respect to varying inputs: fmtip rey fsmach cpower q cfx
C                cfy cm0
C   RW status of diff variables: fmtip:incr rey:incr fsmach:incr
C                cpower:in-zero q:incr cfx:in-zero cfy:in-zero
C                cm0:in-zero
C
C***********************************************************************
      SUBROUTINE FORCE2D_BQ(jd, kd, x, y, xv, yv, q, qb, xx, xy, yx, yy
     +                      , cfx, cfxb, cfy, cfyb, cm0, cm0b, cpower, 
     +                      cpowerb)
      USE PARAMS_GLOBAL
      USE PARAMS_SENSITIVITY
      IMPLICIT NONE
      INCLUDE 'DIFFSIZES.inc'
C  Hint: ISIZE1OFzzbINforce2d should be the value of jd
C  Hint: ISIZE1OFsxxbINforce2d should be the value of jd
C  Hint: ISIZE1OFsyybINforce2d should be the value of jd
C
C  this subroutine computes 2-d sectional cl, cd values.
C  modified version of subroutine clcd of arc2d.  vr. 01-15-91
C
C**********************************************************************
C**********************************************************************
      INTEGER jd, kd
      REAL q(jd, kd, nq), x(jd, kd), y(jd, kd), xv(jmax, kmax), yv(jmax
     +     , kmax)
      REAL qb(jd, kd, nq)
      REAL xx(jd, kd), xy(jd, kd)
      REAL yx(jd, kd), yy(jd, kd)
C local variables
      REAL cfx, cfy, cm0, cpower
      REAL cfxb, cfyb, cm0b, cpowerb
C
      REAL zz(jd), sxx(jd), syy(jd)
      REAL fmm, rr, rho, u, v, um, vm, e, vsq, pp, pp1, cp, cn, cc, cmle
     +     , cpinv, uxi, vxi
      REAL fmmb, rrb, rhob, ub, vb, umb, vmb, eb, vsqb, ppb, pp1b, cpb, 
     +     cnb, ccb, cmleb, cpinvb, uxib, vxib
      REAL ueta, veta, xix, xiy, etaxxx, etax, etay
      REAL uetab, vetab
      REAL tauw, sfdiv, cnv, ccv, cmlev, cpv, uinf2, amu
      REAL tauwb, sfdivb, cnvb, ccvb, cmlevb, cpvb, uinf2b, amub
      REAL chord, alngth
C
      INTEGER k, k2, k3, j1, j2, j, jm1, jp1, jv, kv
      INTEGER js, je
      INTEGER branch
      REAL temp3
      REAL temp2
      REAL temp1
      REAL temp0
      REAL syyb(jd)
      REAL temp4b9
      REAL temp7b
      REAL temp4b8
      REAL temp4b7
      REAL temp4b6
      REAL temp4b5
      REAL temp4b4
      REAL temp4b3
      REAL temp4b2
      REAL temp4b1
      REAL temp4b0
      REAL temp7b12
      REAL temp7b11
      REAL temp0b
      REAL tempb0
      REAL temp7b9
      REAL temp7b10
      REAL temp7b8
      REAL temp7b7
      REAL temp7b6
      REAL temp7b5
      REAL temp7b4
      REAL temp7b3
      REAL temp7b2
      REAL temp7b1
      REAL temp7b0
      REAL tempb
      REAL temp0b0
      REAL temp1b18
      REAL temp1b17
      REAL temp1b16
      REAL temp1b15
      REAL temp1b14
      REAL temp1b13
      REAL temp1b12
      REAL temp1b11
      REAL temp1b10
      REAL zzb(jd)
      REAL temp1b9
      REAL temp1b8
      REAL temp1b7
      REAL temp1b
      REAL temp1b6
      REAL temp
      REAL temp1b5
      REAL temp10b7
      REAL temp1b4
      REAL temp4b12
      REAL temp10b6
      REAL temp1b3
      REAL temp4b11
      REAL temp10b5
      REAL temp1b2
      REAL temp4b10
      REAL temp9
      REAL temp10b4
      REAL temp1b1
      REAL temp8
      REAL temp10b3
      REAL sxxb(jd)
      REAL temp1b0
      REAL temp7
      REAL temp10b
      REAL temp10b2
      REAL temp6
      REAL temp4b
      REAL temp10b1
      REAL temp5
      REAL temp10b0
      REAL temp4
C
C***  first executable statement
C
C..initialize constants and variables
C
C..set limits of integration
C     
      k = kbeg
      k2 = k + 1
      k3 = k2 + 1
      j1 = jtail1
      j2 = jtail2
C
      IF (fsmach .NE. 0) THEN
        fmm = fsmach
        CALL PUSHCONTROL2B(2)
      ELSE IF (fmtip .NE. 0) THEN
        fmm = fmtip
        CALL PUSHCONTROL2B(1)
      ELSE
        CALL PUSHCONTROL2B(0)
        fmm = 1.0
      END IF
C
C..compute cp at grid points and store in an array 
C
      DO j=j1,j2
        CALL PUSHREAL8(rr)
        rr = 1./q(j, k, 1)
        CALL PUSHREAL8(rho)
        rho = q(j, k, 1)*q(j, k, nq)
        CALL PUSHREAL8(u)
        u = q(j, k, 2)*rr
        CALL PUSHREAL8(v)
        v = q(j, k, 3)*rr
        e = q(j, k, 4)*q(j, k, nq)
        CALL PUSHREAL8(vsq)
        vsq = u*u + v*v
        pp = gm1*(e-rho*vsq/2.)
        CALL PUSHREAL8(pp1)
        pp1 = pp/pinf
        cp = 2.*(pp1-1.)/(gamma*fmm**2)
        zz(j) = cp
C
        rr = 1./q(j, k-1, 1)
        rho = q(j, k-1, 1)*q(j, k-1, nq)
        CALL PUSHREAL8(u)
        u = q(j, k-1, 2)*rr
        CALL PUSHREAL8(v)
        v = q(j, k-1, 3)*rr
        e = q(j, k-1, 4)*q(j, k-1, nq)
        vsq = u*u + v*v
        pp = gm1*(e-rho*vsq/2.)
        CALL PUSHREAL8(pp1)
        pp1 = pp/pinf
        cp = 2.*(pp1-1.)/(gamma*fmm**2)
        zz(j) = 0.5*(zz(j)+cp)
      ENDDO
C
C..compute normal force coefficient and chord directed force coeff
C..chord taken as one in all cases, modified later
C
      cpinv = 0.
      DO j=j1,j2
        jv = j - nhalo
        kv = k - nhalo
        CALL PUSHREAL8(u)
        u = q(j, k, 2)/q(j, k, 1)
        CALL PUSHREAL8(v)
        v = q(j, k, 3)/q(j, k, 1)
        um = q(j, k-1, 2)/q(j, k-1, 1)
        vm = q(j, k-1, 3)/q(j, k-1, 1)
        cpinv = cpinv + 0.5*(u+um)*zz(j)*(yv(jv+1, kv)-yv(jv, kv)) - 0.5
     +    *(v+vm)*zz(j)*(xv(jv+1, kv)-xv(jv, kv))
      ENDDO
C
C
C..viscous coefficent of friction calculation
C..re already has fsmach scaling
C
      cpv = 0.
C
      IF (.NOT.invisc) THEN
        alngth = 1.
        amu = rinf*alngth/rey
        uinf2 = fmm**2
C
        j = j1
        jp1 = j + 1
        uxi = q(jp1, k, 2)/q(jp1, k, 1) - q(j, k, 2)/q(j, k, 1)
        vxi = q(jp1, k, 3)/q(jp1, k, 1) - q(j, k, 3)/q(j, k, 1)
        ueta = -(1.5*q(j, k, 2)/q(j, k, 1)) + 2.*q(j, k2, 2)/q(j, k2, 1)
     +    - .5*q(j, k3, 2)/q(j, k3, 1)
        veta = -(1.5*q(j, k, 3)/q(j, k, 1)) + 2.*q(j, k2, 3)/q(j, k2, 1)
     +    - .5*q(j, k3, 3)/q(j, k3, 1)
        xix = xx(j, k)
        xiy = xy(j, k)
        etax = yx(j, k)
        etay = yy(j, k)
        sfdiv = 2./3*(uxi*xix+ueta*etax+vxi*xiy+veta*etay)
        sxx(j) = amu*(2.*(uxi*xix+ueta*etax)-sfdiv)
        syy(j) = amu*(2.*(vxi*xiy+veta*etay)-sfdiv)
        tauw = amu*(uxi*xiy+ueta*etay+(vxi*xix+veta*etax))
        CALL PUSHREAL8(sxx(j))
C
        sxx(j) = sxx(j)/(.5*rinf*uinf2)
        CALL PUSHREAL8(syy(j))
        syy(j) = syy(j)/(.5*rinf*uinf2)
        CALL PUSHREAL8(zz(j))
        zz(j) = tauw/(.5*rinf*uinf2)
C
        j = j2
        jm1 = j - 1
        uxi = q(j, k, 2)/q(j, k, 1) - q(jm1, k, 2)/q(jm1, k, 1)
        vxi = q(j, k, 3)/q(j, k, 1) - q(jm1, k, 3)/q(jm1, k, 1)
        CALL PUSHREAL8(ueta)
        ueta = -(1.5*q(j, k, 2)/q(j, k, 1)) + 2.*q(j, k2, 2)/q(j, k2, 1)
     +    - .5*q(j, k3, 2)/q(j, k3, 1)
        CALL PUSHREAL8(veta)
        veta = -(1.5*q(j, k, 3)/q(j, k, 1)) + 2.*q(j, k2, 3)/q(j, k2, 1)
     +    - .5*q(j, k3, 3)/q(j, k3, 1)
        xix = xx(j, k)
        xiy = xy(j, k)
        etax = yx(j, k)
        etay = yy(j, k)
        CALL PUSHREAL8(sfdiv)
        sfdiv = 2./3*(uxi*xix+ueta*etax+vxi*xiy+veta*etay)
        CALL PUSHREAL8(sxx(j))
        sxx(j) = amu*(2.*(uxi*xix+ueta*etax)-sfdiv)
        CALL PUSHREAL8(syy(j))
        syy(j) = amu*(2.*(vxi*xiy+veta*etay)-sfdiv)
        tauw = amu*(uxi*xiy+ueta*etay+(vxi*xix+veta*etax))
        CALL PUSHREAL8(sxx(j))
C
        sxx(j) = sxx(j)/(.5*rinf*uinf2)
        CALL PUSHREAL8(syy(j))
        syy(j) = syy(j)/(.5*rinf*uinf2)
        CALL PUSHREAL8(zz(j))
        zz(j) = tauw/(.5*rinf*uinf2)
C
C..set limits
C
        js = j1 + 1
        je = j2 - 1
        CALL PUSHINTEGER4(j)
        DO j=js,je
          jp1 = j + 1
          jm1 = j - 1
          uxi = .5*(q(jp1, k, 2)/q(jp1, k, 1)-q(jm1, k, 2)/q(jm1, k, 1))
          vxi = .5*(q(jp1, k, 3)/q(jp1, k, 1)-q(jm1, k, 3)/q(jm1, k, 1))
          CALL PUSHREAL8(ueta)
          ueta = -(1.5*q(j, k, 2)/q(j, k, 1)) + 2.*q(j, k2, 2)/q(j, k2, 
     +      1) - .5*q(j, k3, 2)/q(j, k3, 1)
          CALL PUSHREAL8(veta)
          veta = -(1.5*q(j, k, 3)/q(j, k, 1)) + 2.*q(j, k2, 3)/q(j, k2, 
     +      1) - .5*q(j, k3, 3)/q(j, k3, 1)
          xix = xx(j, k)
          xiy = xy(j, k)
          etax = yx(j, k)
          etay = yy(j, k)
          CALL PUSHREAL8(sfdiv)
          sfdiv = 2./3*(uxi*xix+ueta*etax+vxi*xiy+veta*etay)
          CALL PUSHREAL8(sxx(j))
          sxx(j) = amu*(2.*(uxi*xix+ueta*etax)-sfdiv)
          CALL PUSHREAL8(syy(j))
          syy(j) = amu*(2.*(vxi*xiy+veta*etay)-sfdiv)
          tauw = amu*(uxi*xiy+ueta*etay+(vxi*xix+veta*etax))
          CALL PUSHREAL8(sxx(j))
C
          sxx(j) = sxx(j)/(.5*rinf*uinf2)
          CALL PUSHREAL8(syy(j))
          syy(j) = syy(j)/(.5*rinf*uinf2)
          CALL PUSHREAL8(zz(j))
          zz(j) = tauw/(.5*rinf*uinf2)
        ENDDO
C
C..compute viscous normal and axial forces
C
        DO j=j1,j2
          jv = j - nhalo
          kv = k - nhalo
          CALL PUSHREAL8(u)
          u = q(j, k, 2)/q(j, k, 1)
          CALL PUSHREAL8(v)
          v = q(j, k, 3)/q(j, k, 1)
          um = q(j, k-1, 2)/q(j, k-1, 1)
          vm = q(j, k-1, 3)/q(j, k-1, 1)
          cpv = cpv + 0.5*(u+um)*zz(j)*(xv(jv+1, kv)-xv(jv, kv)) - 0.5*(
     +      u+um)*sxx(j)*(yv(jv+1, kv)-yv(jv, kv)) - 0.5*(v+vm)*zz(j)*(
     +      yv(jv+1, kv)-yv(jv, kv)) + 0.5*(v+vm)*syy(j)*(xv(jv+1, kv)-
     +      xv(jv, kv))
        ENDDO
        CALL PUSHCONTROL1B(0)
      ELSE
        CALL PUSHCONTROL1B(1)
      END IF
      temp10b7 = cpowerb/fmm
      cpinvb = temp10b7
      cpvb = temp10b7
      fmmb = -((cpinv+cpv)*temp10b7/fmm)
      cmleb = cm0b
      cmlevb = cm0b
      cnb = cfyb
      cnvb = cfyb
      ccb = cfxb
      ccvb = cfxb
      CALL POPCONTROL1B(branch)
      IF (branch .EQ. 0) THEN
        ccvb = (half+1.0)*ccvb
        cmlevb = (1.0-half)*cmlevb
        cnvb = (1.0-half)*cnvb
        zzb = 0.0
        sxxb = 0.0
        syyb = 0.0
        DO j=j2,j1,-1
          jv = j - nhalo
          u = q(j, k, 2)/q(j, k, 1)
          v = q(j, k, 3)/q(j, k, 1)
          kv = k - nhalo
          um = q(j, k-1, 2)/q(j, k-1, 1)
          vm = q(j, k-1, 3)/q(j, k-1, 1)
          temp10b = (xv(jv+1, kv)-xv(jv, kv))*0.5*cpvb
          temp10b0 = -((yv(jv+1, kv)-yv(jv, kv))*0.5*cpvb)
          temp10b1 = (xv(jv+1, kv)-xv(jv, kv))*0.5*cpvb
          temp10b2 = -((yv(jv+1, kv)-yv(jv, kv))*0.5*cpvb)
          ub = sxx(j)*temp10b0 + zz(j)*temp10b
          umb = sxx(j)*temp10b0 + zz(j)*temp10b
          zzb(j) = zzb(j) + ((xv(jv+1, kv)+xv(jv, kv))*0.5*(yv(jv+1, kv)
     +      -yv(jv, kv))+(yv(jv+1, kv)+yv(jv, kv))*0.5*(xv(jv+1, kv)-xv(
     +      jv, kv)))*cmlevb + (xv(jv+1, kv)-xv(jv, kv))*ccvb - (yv(jv+1
     +      , kv)-yv(jv, kv))*cnvb + (v+vm)*temp10b2 + (u+um)*temp10b
          sxxb(j) = sxxb(j) + (u+um)*temp10b0 - (yv(jv+1, kv)-yv(jv, kv)
     +      )*ccvb - (yv(jv+1, kv)+yv(jv, kv))*(yv(jv+1, kv)-yv(jv, kv))
     +      *0.5*cmlevb
          vb = zz(j)*temp10b2 + syy(j)*temp10b1
          vmb = zz(j)*temp10b2 + syy(j)*temp10b1
          syyb(j) = syyb(j) + (xv(jv+1, kv)-xv(jv, kv))*cnvb - (xv(jv+1
     +      , kv)+xv(jv, kv))*(xv(jv+1, kv)-xv(jv, kv))*0.5*cmlevb + (v+
     +      vm)*temp10b1
          temp10b3 = vmb/q(j, k-1, 1)
          qb(j, k-1, 3) = qb(j, k-1, 3) + temp10b3
          qb(j, k-1, 1) = qb(j, k-1, 1) - q(j, k-1, 3)*temp10b3/q(j, k-1
     +      , 1)
          temp10b4 = umb/q(j, k-1, 1)
          qb(j, k-1, 2) = qb(j, k-1, 2) + temp10b4
          qb(j, k-1, 1) = qb(j, k-1, 1) - q(j, k-1, 2)*temp10b4/q(j, k-1
     +      , 1)
          CALL POPREAL8(v)
          temp10b5 = vb/q(j, k, 1)
          qb(j, k, 3) = qb(j, k, 3) + temp10b5
          qb(j, k, 1) = qb(j, k, 1) - q(j, k, 3)*temp10b5/q(j, k, 1)
          CALL POPREAL8(u)
          temp10b6 = ub/q(j, k, 1)
          qb(j, k, 2) = qb(j, k, 2) + temp10b6
          qb(j, k, 1) = qb(j, k, 1) - q(j, k, 2)*temp10b6/q(j, k, 1)
        ENDDO
        amub = 0.0
        uinf2b = 0.0
        DO j=je,js,-1
          temp7 = .5*rinf*uinf2
          jp1 = j + 1
          jm1 = j - 1
          vxi = .5*(q(jp1, k, 3)/q(jp1, k, 1)-q(jm1, k, 3)/q(jm1, k, 1))
          uxi = .5*(q(jp1, k, 2)/q(jp1, k, 1)-q(jm1, k, 2)/q(jm1, k, 1))
          etax = yx(j, k)
          etay = yy(j, k)
          xix = xx(j, k)
          xiy = xy(j, k)
          tauw = amu*(uxi*xiy+ueta*etay+(vxi*xix+veta*etax))
          CALL POPREAL8(zz(j))
          temp9 = .5*rinf*uinf2
          tauwb = zzb(j)/temp9
          CALL POPREAL8(syy(j))
          temp8 = .5*rinf*uinf2
          CALL POPREAL8(sxx(j))
          uinf2b = uinf2b - syy(j)*.5*rinf*syyb(j)/temp8**2 - sxx(j)*.5*
     +      rinf*sxxb(j)/temp7**2 - tauw*.5*rinf*zzb(j)/temp9**2
          zzb(j) = 0.0
          syyb(j) = syyb(j)/temp8
          sxxb(j) = sxxb(j)/temp7
          temp7b = amu*tauwb
          amub = amub + (2.*(xiy*vxi+etay*veta)-sfdiv)*syyb(j) + (2.*(
     +      xix*uxi+etax*ueta)-sfdiv)*sxxb(j) + (xiy*uxi+etay*ueta+xix*
     +      vxi+etax*veta)*tauwb
          CALL POPREAL8(syy(j))
          temp7b2 = amu*syyb(j)
          syyb(j) = 0.0
          CALL POPREAL8(sxx(j))
          temp7b0 = amu*sxxb(j)
          sfdivb = -temp7b0 - temp7b2
          sxxb(j) = 0.0
          CALL POPREAL8(sfdiv)
          temp7b1 = 2.*sfdivb/3
          uxib = 2.*xix*temp7b0 + xix*temp7b1 + xiy*temp7b
          uetab = 2.*etax*temp7b0 + etax*temp7b1 + etay*temp7b
          vxib = 2.*xiy*temp7b2 + xiy*temp7b1 + xix*temp7b
          vetab = 2.*etay*temp7b2 + etay*temp7b1 + etax*temp7b
          CALL POPREAL8(veta)
          temp7b3 = 2.*vetab/q(j, k2, 1)
          temp7b4 = -(1.5*vetab/q(j, k, 1))
          temp7b5 = -(.5*vetab/q(j, k3, 1))
          qb(j, k2, 3) = qb(j, k2, 3) + temp7b3
          qb(j, k2, 1) = qb(j, k2, 1) - q(j, k2, 3)*temp7b3/q(j, k2, 1)
          qb(j, k, 3) = qb(j, k, 3) + temp7b4
          qb(j, k, 1) = qb(j, k, 1) - q(j, k, 3)*temp7b4/q(j, k, 1)
          qb(j, k3, 3) = qb(j, k3, 3) + temp7b5
          qb(j, k3, 1) = qb(j, k3, 1) - q(j, k3, 3)*temp7b5/q(j, k3, 1)
          CALL POPREAL8(ueta)
          temp7b6 = 2.*uetab/q(j, k2, 1)
          temp7b7 = -(1.5*uetab/q(j, k, 1))
          temp7b8 = -(.5*uetab/q(j, k3, 1))
          qb(j, k2, 2) = qb(j, k2, 2) + temp7b6
          qb(j, k2, 1) = qb(j, k2, 1) - q(j, k2, 2)*temp7b6/q(j, k2, 1)
          qb(j, k, 2) = qb(j, k, 2) + temp7b7
          qb(j, k, 1) = qb(j, k, 1) - q(j, k, 2)*temp7b7/q(j, k, 1)
          qb(j, k3, 2) = qb(j, k3, 2) + temp7b8
          qb(j, k3, 1) = qb(j, k3, 1) - q(j, k3, 2)*temp7b8/q(j, k3, 1)
          temp7b9 = .5*vxib/q(jp1, k, 1)
          temp7b10 = -(.5*vxib/q(jm1, k, 1))
          qb(jp1, k, 3) = qb(jp1, k, 3) + temp7b9
          qb(jp1, k, 1) = qb(jp1, k, 1) - q(jp1, k, 3)*temp7b9/q(jp1, k
     +      , 1)
          qb(jm1, k, 3) = qb(jm1, k, 3) + temp7b10
          qb(jm1, k, 1) = qb(jm1, k, 1) - q(jm1, k, 3)*temp7b10/q(jm1, k
     +      , 1)
          temp7b11 = .5*uxib/q(jp1, k, 1)
          temp7b12 = -(.5*uxib/q(jm1, k, 1))
          qb(jp1, k, 2) = qb(jp1, k, 2) + temp7b11
          qb(jp1, k, 1) = qb(jp1, k, 1) - q(jp1, k, 2)*temp7b11/q(jp1, k
     +      , 1)
          qb(jm1, k, 2) = qb(jm1, k, 2) + temp7b12
          qb(jm1, k, 1) = qb(jm1, k, 1) - q(jm1, k, 2)*temp7b12/q(jm1, k
     +      , 1)
        ENDDO
        CALL POPINTEGER4(j)
        temp1 = .5*rinf*uinf2
        temp4 = .5*rinf*uinf2
        j = j2
        jm1 = j - 1
        vxi = q(j, k, 3)/q(j, k, 1) - q(jm1, k, 3)/q(jm1, k, 1)
        uxi = q(j, k, 2)/q(j, k, 1) - q(jm1, k, 2)/q(jm1, k, 1)
        etax = yx(j, k)
        etay = yy(j, k)
        xix = xx(j, k)
        xiy = xy(j, k)
        tauw = amu*(uxi*xiy+ueta*etay+(vxi*xix+veta*etax))
        CALL POPREAL8(zz(j))
        temp6 = .5*rinf*uinf2
        tauwb = zzb(j)/temp6
        CALL POPREAL8(syy(j))
        temp5 = .5*rinf*uinf2
        CALL POPREAL8(sxx(j))
        uinf2b = uinf2b - syy(j)*.5*rinf*syyb(j)/temp5**2 - sxx(j)*.5*
     +    rinf*sxxb(j)/temp4**2 - tauw*.5*rinf*zzb(j)/temp6**2
        zzb(j) = 0.0
        syyb(j) = syyb(j)/temp5
        sxxb(j) = sxxb(j)/temp4
        temp4b = amu*tauwb
        amub = amub + (2.*(xiy*vxi+etay*veta)-sfdiv)*syyb(j) + (2.*(xix*
     +    uxi+etax*ueta)-sfdiv)*sxxb(j) + (xiy*uxi+etay*ueta+xix*vxi+
     +    etax*veta)*tauwb
        CALL POPREAL8(syy(j))
        temp4b2 = amu*syyb(j)
        syyb(j) = 0.0
        CALL POPREAL8(sxx(j))
        temp4b0 = amu*sxxb(j)
        sfdivb = -temp4b0 - temp4b2
        sxxb(j) = 0.0
        CALL POPREAL8(sfdiv)
        temp4b1 = 2.*sfdivb/3
        uxib = 2.*xix*temp4b0 + xix*temp4b1 + xiy*temp4b
        uetab = 2.*etax*temp4b0 + etax*temp4b1 + etay*temp4b
        vxib = 2.*xiy*temp4b2 + xiy*temp4b1 + xix*temp4b
        vetab = 2.*etay*temp4b2 + etay*temp4b1 + etax*temp4b
        CALL POPREAL8(veta)
        temp4b3 = 2.*vetab/q(j, k2, 1)
        temp4b4 = -(1.5*vetab/q(j, k, 1))
        temp4b5 = -(.5*vetab/q(j, k3, 1))
        qb(j, k2, 3) = qb(j, k2, 3) + temp4b3
        qb(j, k2, 1) = qb(j, k2, 1) - q(j, k2, 3)*temp4b3/q(j, k2, 1)
        qb(j, k, 3) = qb(j, k, 3) + temp4b4
        qb(j, k, 1) = qb(j, k, 1) - q(j, k, 3)*temp4b4/q(j, k, 1)
        qb(j, k3, 3) = qb(j, k3, 3) + temp4b5
        qb(j, k3, 1) = qb(j, k3, 1) - q(j, k3, 3)*temp4b5/q(j, k3, 1)
        CALL POPREAL8(ueta)
        temp4b6 = 2.*uetab/q(j, k2, 1)
        temp4b7 = -(1.5*uetab/q(j, k, 1))
        temp4b8 = -(.5*uetab/q(j, k3, 1))
        qb(j, k2, 2) = qb(j, k2, 2) + temp4b6
        qb(j, k2, 1) = qb(j, k2, 1) - q(j, k2, 2)*temp4b6/q(j, k2, 1)
        qb(j, k, 2) = qb(j, k, 2) + temp4b7
        qb(j, k, 1) = qb(j, k, 1) - q(j, k, 2)*temp4b7/q(j, k, 1)
        qb(j, k3, 2) = qb(j, k3, 2) + temp4b8
        qb(j, k3, 1) = qb(j, k3, 1) - q(j, k3, 2)*temp4b8/q(j, k3, 1)
        temp4b9 = vxib/q(j, k, 1)
        temp4b10 = -(vxib/q(jm1, k, 1))
        qb(j, k, 3) = qb(j, k, 3) + temp4b9
        qb(j, k, 1) = qb(j, k, 1) - q(j, k, 3)*temp4b9/q(j, k, 1)
        qb(jm1, k, 3) = qb(jm1, k, 3) + temp4b10
        qb(jm1, k, 1) = qb(jm1, k, 1) - q(jm1, k, 3)*temp4b10/q(jm1, k, 
     +    1)
        temp4b11 = uxib/q(j, k, 1)
        temp4b12 = -(uxib/q(jm1, k, 1))
        qb(j, k, 2) = qb(j, k, 2) + temp4b11
        qb(j, k, 1) = qb(j, k, 1) - q(j, k, 2)*temp4b11/q(j, k, 1)
        qb(jm1, k, 2) = qb(jm1, k, 2) + temp4b12
        qb(jm1, k, 1) = qb(jm1, k, 1) - q(jm1, k, 2)*temp4b12/q(jm1, k, 
     +    1)
        j = j1
        jp1 = j + 1
        vxi = q(jp1, k, 3)/q(jp1, k, 1) - q(j, k, 3)/q(j, k, 1)
        uxi = q(jp1, k, 2)/q(jp1, k, 1) - q(j, k, 2)/q(j, k, 1)
        etax = yx(j, k)
        etay = yy(j, k)
        xix = xx(j, k)
        xiy = xy(j, k)
        tauw = amu*(uxi*xiy+ueta*etay+(vxi*xix+veta*etax))
        CALL POPREAL8(zz(j))
        temp3 = .5*rinf*uinf2
        tauwb = zzb(j)/temp3
        CALL POPREAL8(syy(j))
        temp2 = .5*rinf*uinf2
        CALL POPREAL8(sxx(j))
        uinf2b = uinf2b - syy(j)*.5*rinf*syyb(j)/temp2**2 - sxx(j)*.5*
     +    rinf*sxxb(j)/temp1**2 - tauw*.5*rinf*zzb(j)/temp3**2
        zzb(j) = 0.0
        syyb(j) = syyb(j)/temp2
        sxxb(j) = sxxb(j)/temp1
        temp1b5 = amu*tauwb
        amub = amub + (2.*(xiy*vxi+etay*veta)-sfdiv)*syyb(j) + (2.*(xix*
     +    uxi+etax*ueta)-sfdiv)*sxxb(j) + (xiy*uxi+etay*ueta+xix*vxi+
     +    etax*veta)*tauwb
        temp1b8 = amu*syyb(j)
        temp1b6 = amu*sxxb(j)
        sfdivb = -temp1b6 - temp1b8
        temp1b7 = 2.*sfdivb/3
        uxib = 2.*xix*temp1b6 + xix*temp1b7 + xiy*temp1b5
        uetab = 2.*etax*temp1b6 + etax*temp1b7 + etay*temp1b5
        vxib = 2.*xiy*temp1b8 + xiy*temp1b7 + xix*temp1b5
        vetab = 2.*etay*temp1b8 + etay*temp1b7 + etax*temp1b5
        temp1b9 = 2.*vetab/q(j, k2, 1)
        temp1b10 = -(1.5*vetab/q(j, k, 1))
        temp1b11 = -(.5*vetab/q(j, k3, 1))
        qb(j, k2, 3) = qb(j, k2, 3) + temp1b9
        qb(j, k2, 1) = qb(j, k2, 1) - q(j, k2, 3)*temp1b9/q(j, k2, 1)
        qb(j, k, 3) = qb(j, k, 3) + temp1b10
        qb(j, k, 1) = qb(j, k, 1) - q(j, k, 3)*temp1b10/q(j, k, 1)
        qb(j, k3, 3) = qb(j, k3, 3) + temp1b11
        qb(j, k3, 1) = qb(j, k3, 1) - q(j, k3, 3)*temp1b11/q(j, k3, 1)
        temp1b12 = 2.*uetab/q(j, k2, 1)
        temp1b13 = -(1.5*uetab/q(j, k, 1))
        temp1b14 = -(.5*uetab/q(j, k3, 1))
        qb(j, k2, 2) = qb(j, k2, 2) + temp1b12
        qb(j, k2, 1) = qb(j, k2, 1) - q(j, k2, 2)*temp1b12/q(j, k2, 1)
        qb(j, k, 2) = qb(j, k, 2) + temp1b13
        qb(j, k, 1) = qb(j, k, 1) - q(j, k, 2)*temp1b13/q(j, k, 1)
        qb(j, k3, 2) = qb(j, k3, 2) + temp1b14
        qb(j, k3, 1) = qb(j, k3, 1) - q(j, k3, 2)*temp1b14/q(j, k3, 1)
        temp1b15 = vxib/q(jp1, k, 1)
        temp1b16 = -(vxib/q(j, k, 1))
        qb(jp1, k, 3) = qb(jp1, k, 3) + temp1b15
        qb(jp1, k, 1) = qb(jp1, k, 1) - q(jp1, k, 3)*temp1b15/q(jp1, k, 
     +    1)
        qb(j, k, 3) = qb(j, k, 3) + temp1b16
        qb(j, k, 1) = qb(j, k, 1) - q(j, k, 3)*temp1b16/q(j, k, 1)
        temp1b17 = uxib/q(jp1, k, 1)
        temp1b18 = -(uxib/q(j, k, 1))
        qb(jp1, k, 2) = qb(jp1, k, 2) + temp1b17
        qb(jp1, k, 1) = qb(jp1, k, 1) - q(jp1, k, 2)*temp1b17/q(jp1, k, 
     +    1)
        qb(j, k, 2) = qb(j, k, 2) + temp1b18
        qb(j, k, 1) = qb(j, k, 1) - q(j, k, 2)*temp1b18/q(j, k, 1)
        fmmb = fmmb + 2*fmm*uinf2b
        reyb = reyb - rinf*alngth*amub/rey**2
      ELSE
        zzb = 0.0
      END IF
      ccb = (half+1.0)*ccb
      cmleb = (1.0-half)*cmleb
      cnb = (1.0-half)*cnb
      DO j=j2,j1,-1
        jv = j - nhalo
        u = q(j, k, 2)/q(j, k, 1)
        v = q(j, k, 3)/q(j, k, 1)
        kv = k - nhalo
        um = q(j, k-1, 2)/q(j, k-1, 1)
        vm = q(j, k-1, 3)/q(j, k-1, 1)
        temp1b = (yv(jv+1, kv)-yv(jv, kv))*0.5*cpinvb
        temp1b0 = -((xv(jv+1, kv)-xv(jv, kv))*0.5*cpinvb)
        ub = zz(j)*temp1b
        umb = zz(j)*temp1b
        zzb(j) = zzb(j) + ((xv(jv+1, kv)+xv(jv, kv))*0.5*(xv(jv+1, kv)-
     +    xv(jv, kv))+(yv(jv+1, kv)+yv(jv, kv))*0.5*(yv(jv+1, kv)-yv(jv
     +    , kv)))*cmleb - (xv(jv+1, kv)-xv(jv, kv))*cnb + (yv(jv+1, kv)-
     +    yv(jv, kv))*ccb + (v+vm)*temp1b0 + (u+um)*temp1b
        vb = zz(j)*temp1b0
        vmb = zz(j)*temp1b0
        temp1b1 = vmb/q(j, k-1, 1)
        qb(j, k-1, 3) = qb(j, k-1, 3) + temp1b1
        qb(j, k-1, 1) = qb(j, k-1, 1) - q(j, k-1, 3)*temp1b1/q(j, k-1, 1
     +    )
        temp1b2 = umb/q(j, k-1, 1)
        qb(j, k-1, 2) = qb(j, k-1, 2) + temp1b2
        qb(j, k-1, 1) = qb(j, k-1, 1) - q(j, k-1, 2)*temp1b2/q(j, k-1, 1
     +    )
        CALL POPREAL8(v)
        temp1b3 = vb/q(j, k, 1)
        qb(j, k, 3) = qb(j, k, 3) + temp1b3
        qb(j, k, 1) = qb(j, k, 1) - q(j, k, 3)*temp1b3/q(j, k, 1)
        CALL POPREAL8(u)
        temp1b4 = ub/q(j, k, 1)
        qb(j, k, 2) = qb(j, k, 2) + temp1b4
        qb(j, k, 1) = qb(j, k, 1) - q(j, k, 2)*temp1b4/q(j, k, 1)
      ENDDO
      DO j=j2,j1,-1
        cpb = 0.5*zzb(j)
        zzb(j) = 0.5*zzb(j)
        temp0 = gamma*fmm**2
        temp0b = 2.*cpb/temp0
        pp1b = temp0b
        fmmb = fmmb - gamma*(pp1-1.)*2*fmm*temp0b/temp0
        CALL POPREAL8(pp1)
        ppb = pp1b/pinf
        temp0b0 = gm1*ppb
        eb = temp0b0
        rhob = -(vsq*temp0b0/2.)
        vsqb = -(rho*temp0b0/2.)
        ub = 2*u*vsqb
        vb = 2*v*vsqb
        qb(j, k-1, 4) = qb(j, k-1, 4) + q(j, k-1, nq)*eb
        qb(j, k-1, nq) = qb(j, k-1, nq) + q(j, k-1, 4)*eb
        CALL POPREAL8(v)
        qb(j, k-1, 3) = qb(j, k-1, 3) + rr*vb
        rrb = q(j, k-1, 2)*ub + q(j, k-1, 3)*vb
        CALL POPREAL8(u)
        qb(j, k-1, 2) = qb(j, k-1, 2) + rr*ub
        qb(j, k-1, 1) = qb(j, k-1, 1) + q(j, k-1, nq)*rhob
        qb(j, k-1, nq) = qb(j, k-1, nq) + q(j, k-1, 1)*rhob
        vsq = u*u + v*v
        rho = q(j, k, 1)*q(j, k, nq)
        qb(j, k-1, 1) = qb(j, k-1, 1) - rrb/q(j, k-1, 1)**2
        rr = 1./q(j, k, 1)
        cpb = zzb(j)
        zzb(j) = 0.0
        temp = gamma*fmm**2
        tempb = 2.*cpb/temp
        pp1b = tempb
        fmmb = fmmb - gamma*(pp1-1.)*2*fmm*tempb/temp
        CALL POPREAL8(pp1)
        ppb = pp1b/pinf
        tempb0 = gm1*ppb
        eb = tempb0
        rhob = -(vsq*tempb0/2.)
        vsqb = -(rho*tempb0/2.)
        CALL POPREAL8(vsq)
        ub = 2*u*vsqb
        vb = 2*v*vsqb
        qb(j, k, 4) = qb(j, k, 4) + q(j, k, nq)*eb
        qb(j, k, nq) = qb(j, k, nq) + q(j, k, 4)*eb
        CALL POPREAL8(v)
        qb(j, k, 3) = qb(j, k, 3) + rr*vb
        rrb = q(j, k, 2)*ub + q(j, k, 3)*vb
        CALL POPREAL8(u)
        qb(j, k, 2) = qb(j, k, 2) + rr*ub
        CALL POPREAL8(rho)
        qb(j, k, 1) = qb(j, k, 1) + q(j, k, nq)*rhob
        qb(j, k, nq) = qb(j, k, nq) + q(j, k, 1)*rhob
        CALL POPREAL8(rr)
        qb(j, k, 1) = qb(j, k, 1) - rrb/q(j, k, 1)**2
      ENDDO
      CALL POPCONTROL2B(branch)
      IF (branch .NE. 0) THEN
        IF (branch .EQ. 1) THEN
          fmtipb = fmtipb + fmmb
        ELSE
          fsmachb = fsmachb + fmmb
        END IF
      END IF
      cpowerb = 0.0
      cfxb = 0.0
      cfyb = 0.0
      cm0b = 0.0
      END
