C        Generated by TAPENADE     (INRIA, Tropics team)
C  Tapenade 3.6 (r4343) - 10 Feb 2012 10:52
C
C  Differentiation of iflux in reverse (adjoint) mode:
C   gradient     of useful results: f ql qr
C   with respect to varying inputs: f ql qr
C
C*************************************************************************
      SUBROUTINE IFLUX_BQ(f, fb, ql, qlb, qr, qrb, is, ie, im, th, qt, 
     +                    eps, fmin, fmax, ibmin, ibmax, iba)
      USE PARAMS_GLOBAL
      IMPLICIT NONE
C
C 2nd order weno scheme with Van-Leer limiter
C*************************************************************************
C*************************************************************************
C
      INTEGER is, ie, im, ibmin, ibmax, iba(mdim)
      REAL th, qt, eps
      REAL f(mdim, nmv), fmin(nmv), fmax(nmv)
      REAL fb(mdim, nmv)
C local variables
      REAL ql(mdim, nmv), qr(mdim, nmv)
      REAL qlb(mdim, nmv), qrb(mdim, nmv)
C
      INTEGER i, n
      REAL s1, s2, slope, LIM_VANLEER
      REAL s1b, s2b, slopeb
      INTEGER branch
C
C..this is just 1st order upwind
C
      IF (qt .EQ. 0.0) THEN
        DO n=1,nmv
          DO i=is,ie
            fb(i, n) = fb(i, n) + qlb(i, n) + qrb(i, n)
            qrb(i, n) = 0.0
            qlb(i, n) = 0.0
          ENDDO
        ENDDO
      ELSE
        DO n=1,nmv
C
          IF (ibmin .EQ. 2) THEN
            CALL PUSHCONTROL1B(0)
          ELSE
            CALL PUSHCONTROL1B(1)
          END IF
C
          IF (ibmax .EQ. 2) THEN
            s1 = f(ie, n) - f(ie-1, n)
            s2 = fmax(n) - f(ie, n)
            slopeb = 0.5*qlb(ie, n) - 0.5*qrb(ie, n)
            CALL LIM_VANLEER_BQ(s1, s1b, s2, s2b, slopeb)
            fb(ie, n) = fb(ie, n) + qlb(ie, n) + s1b - s2b + qrb(ie, n)
            qrb(ie, n) = 0.0
            qlb(ie, n) = 0.0
            fb(ie-1, n) = fb(ie-1, n) - s1b
          ELSE
            fb(ie, n) = fb(ie, n) + qlb(ie, n) + qrb(ie, n)
            qrb(ie, n) = 0.0
            qlb(ie, n) = 0.0
          END IF
          CALL POPCONTROL1B(branch)
          IF (branch .EQ. 0) THEN
            fb(is, n) = fb(is, n) + qlb(is, n) + qrb(is, n)
            slopeb = 0.5*qlb(is, n) - 0.5*qrb(is, n)
            qrb(is, n) = 0.0
            qlb(is, n) = 0.0
            s1 = f(is, n) - fmin(n)
            s2 = f(is+1, n) - f(is, n)
            CALL LIM_VANLEER_BQ(s1, s1b, s2, s2b, slopeb)
            fb(is+1, n) = fb(is+1, n) + s2b
            fb(is, n) = fb(is, n) + s1b - s2b
          ELSE
            fb(is, n) = fb(is, n) + qlb(is, n) + qrb(is, n)
            qrb(is, n) = 0.0
            qlb(is, n) = 0.0
          END IF
          DO i=is+1,ie-1
            fb(i, n) = fb(i, n) + qlb(i, n) + qrb(i, n)
            slopeb = 0.5*qlb(i, n) - 0.5*qrb(i, n)
            qrb(i, n) = 0.0
            qlb(i, n) = 0.0
            s1b = slopeb/2
            s2b = slopeb/2
            fb(i+1, n) = fb(i+1, n) + s2b
            fb(i, n) = fb(i, n) + s1b - s2b
            fb(i-1, n) = fb(i-1, n) - s1b
          ENDDO
        ENDDO
      END IF
      END
